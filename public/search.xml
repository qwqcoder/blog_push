<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Os学习</title>
    <url>/2024/05/24/a31b9c34.html</url>
    <content><![CDATA[<h1 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="https://s2.loli.net/2024/05/22/8np472uVzbZNsxO.png" alt="image-20240208193411962"></p>
<ul>
<li>操作系统是指 <code>控制</code> 和 <code>管理</code> 整个计算机系统的 <code>硬件</code> 和 <code>软件</code> 资源,并合理地组织调度计算机的工作和资源的分配;以提供给用户和其他软件方便的接口和环境;是计算机系统中最基本的系统软件</li>
</ul>
<h2 id="功能和目标"><a href="#功能和目标" class="headerlink" title="功能和目标"></a>功能和目标</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">&#123;% endmermaid %&#125;</span><br><span class="line">graph LR;</span><br><span class="line"><span class="code">    A[操作系统]--&gt;B[提供的功能]; </span></span><br><span class="line"><span class="code">    A--&gt;C[目标];</span></span><br><span class="line"><span class="code">    C--&gt;E[安全,高效];</span></span><br><span class="line"><span class="code">    B--&gt;D[处理机管理];</span></span><br><span class="line"><span class="code">    B--&gt;F[存储器管理];</span></span><br><span class="line"><span class="code">    B--&gt;G[文件管理];</span></span><br><span class="line"><span class="code">    B--&gt;H[设备管理];</span></span><br></pre></td></tr></table></figure>

<h2 id="提供接口"><a href="#提供接口" class="headerlink" title="提供接口"></a>提供接口</h2><ul>
<li>脱机命令接口</li>
</ul>
<p><code>.bat</code> 文件中批量的命令</p>
<ul>
<li>联机命令接口</li>
</ul>
<p><code>cmd</code> 中执行的交互式命令,如 <code>ping</code> 命令</p>
<ul>
<li>程序接口</li>
</ul>
<p>普通用户不能直接使用程序接口, 只能通过程序代码间接使用, 如 <code>printf</code> 调用了系统内关于显示的程序接口</p>
<h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><pre class="mermaid">graph LR;
a[os]-->b[并发];
a-->c[并行];
a-->d[共享];
d-->f[互斥共享];
d-->h[同时共享];
a-->i[虚拟];
i-->j[空分复用];
i-->k[时分复用];
a-->l[异步];</pre>



<ul>
<li><font color='orange'>并发</font></li>
</ul>
<p>指两个或多个事件在同一个时间间隔内发生,这些事件在<font color='red'>宏观上是同时发生</font>,但<font color='red'>微观上是交替发生</font></p>
<ul>
<li><font color='orange'>并行</font></li>
</ul>
<p>指两个或多个事件在同一时刻同时发生</p>
<ul>
<li><p><font color='orange'>共享</font></p>
<p>指资源共享,系统中的资源可供内存中多个并发执行的进程共同使用</p>
<ol>
<li><p><font color='orange'>互斥共享</font></p>
<p>系统中的某些资源,可供多个进程使用,但<font color='red'>一个时间段内只允许一个进程访问该资源</font></p>
</li>
<li><p><font color='orange'>同时共享</font></p>
<p>系统中的某些资源,可供多个进程使用,但<font color='red'>一个时间段内允许多个进程分时访问该资源</font></p>
</li>
</ol>
</li>
<li><p><font color='orange'>虚拟</font></p>
<p>指把一个物理上的实体变为若干个逻辑上的对应物</p>
<ol>
<li><font color='orange'>空分复用</font>: 虚拟存储器技术</li>
<li><font color='orange'>时分复用</font>: 虚拟处理器技术</li>
</ol>
</li>
<li><p><font color='orange'>异步</font></p>
<p>系统并发执行不同程序过程中, 由于资源竞争, 进程的执行不是一贯到底的, 总会有阻塞态发生, 系统走走停停, 不可预知的向前推进 &#x3D;&#x3D;只有系统具有并发性,才可能有异步&#x3D;&#x3D;</p>
</li>
</ul>
<blockquote>
<p><strong>注意</strong></p>
<p><code>单核CPU</code> 同一时刻只能执行 <code>一个程序</code>, 各个程序只能 <code>并发</code> 执行</p>
<p><code>多核CPU</code> 同一时刻可以同时执行 <code>多个程序</code>, 多个程序可以 <code>并行</code> 执行</p>
</blockquote>
<p>指多道程序环境下,运行多个程序并发执行,但由于不同进程争夺系统资源,并发运行中的进程有可能因为资源有限而被阻塞运行,导致进程以不可预知的速度向前推进,进程互相不同步</p>
<hr>
<blockquote>
<p>&#x3D;&#x3D;并发和共享互为存在条件&#x3D;&#x3D;</p>
<p><strong>没有并发就不需要共享和虚拟,并发才可能导致异步</strong></p>
</blockquote>
<hr>
<h1 id="操作系统发展和分类"><a href="#操作系统发展和分类" class="headerlink" title="操作系统发展和分类"></a>操作系统发展和分类</h1><pre class="mermaid">graph LR;
1[手工操作阶段]-->2[单道批处理阶段]-->3[多道批处理阶段]-->4[分时操作系统]-->6[实时操作系统];
6-->7[硬实时操作系统];
6-->8[软实时操作系统]</pre>

<ul>
<li><font color='orange'>单道批处理</font></li>
</ul>
<p><img src="https://s2.loli.net/2024/05/22/kKpXyxULZV8F3aw.png" alt="image-20240208203840859"></p>
<ul>
<li><font color='orange'>多道批处理</font></li>
</ul>
<p><img src="https://s2.loli.net/2024/05/22/vozGbaqQSUs9OXl.png" alt="image-20240208203937848"></p>
<h1 id="操作系统运行机制"><a href="#操作系统运行机制" class="headerlink" title="操作系统运行机制"></a>操作系统运行机制</h1><pre class="mermaid">graph LR;
1[操作系统的运行机制]-->2[两种指令];
2-->3[特权指令];
2-->4[非特权指令];
1-->5[两种处理器状态];
5-->6[核心态];
5-->7[用户态];
1-->8[两种程序];
8-->9[内核程序];
8-->10[应用程序];</pre>



<p>普通程序员编写的是”<font color='orange'>应用程序</font>“，微软、苹果程序员负责实现操作系统，其编写内核程序组成了“<font color='orange'>操作系统内核</font>”，简称“<font color='orange'>内核（kernel）</font>”，内核是操作系统最重要最核心的部分，<font color='orange'>也是最接近硬件的部分</font></p>
<h2 id="两种处理器状态"><a href="#两种处理器状态" class="headerlink" title="两种处理器状态"></a>两种处理器状态</h2><ul>
<li><p><font color='orange'>内核态</font></p>
<p>说明此时运行的是内核程序，此时可以执行特权指令</p>
</li>
<li><p><font color='orange'>用户态</font></p>
<p>说明此时运行的是应用程序，此时只能执行非特权指令</p>
<blockquote>
<p>&#x3D;&#x3D;注意&#x3D;&#x3D;💢</p>
<p>用户态下仍可以通过某些系统接口, 触发 <code>软中断</code>, 临时切换到内核态, 由操作系统验证系统调用的合法性,并执行特权指令, 然后切回用户态</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>CPU 中有个寄存器 <code>PSW</code>，其中有个二进制位，1 表示“内核态”， 0 表示“用户态”</p>
<p>&#x3D;&#x3D;<font color='red'>别名</font>：内核态&#x3D;核心态&#x3D;管态； 用户态&#x3D;目态&#x3D;&#x3D;</p>
<p><font color='red'>“中断”是让操作系统内核夺回cpu使用权的唯一途径</font></p>
</blockquote>
<h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><pre class="mermaid">graph LR;
1[中断类型]-->2[内中断];
2-->4[trap,陷入指令];
2-->5[fault 故障指令];
2-->6[abort 终止指令];
1-->3[外中断];
3-->7[时钟中断];
3-->8[I/O中断请求];</pre>

<ul>
<li><p><font color='orange'>内中断(也称”异常”)</font></p>
<p>与当前执行的指令有关,中断信号来自cpu内部</p>
</li>
<li><p><font color='orange'>外中断(也称”中断”)</font></p>
<p>与当前执行的指令无关,中断信号来自cpu外部</p>
</li>
</ul>
<h2 id="中断机制的基本原理"><a href="#中断机制的基本原理" class="headerlink" title="中断机制的基本原理"></a>中断机制的基本原理</h2><p>不同中断信号,需要不同的中断处理程序来处理,当cpu检测到中断信号后,会根据中断信号类型查询”中断向量表”,以此找到相应的中断处理程序在内存中的存放位置</p>
<h1 id="系统内核"><a href="#系统内核" class="headerlink" title="系统内核"></a>系统内核</h1><p><img src="https://s2.loli.net/2024/05/22/rZTqSIe1y8Q9GX7.png" alt="image-20240211221415699"></p>
<p><img src="https://s2.loli.net/2024/05/22/ItlHzGj1ruZyEC3.png" alt="image-20240211221733356"></p>
<p><img src="https://s2.loli.net/2024/05/22/vwfYIpuRVrdlkoQ.png" alt="image-20240211221842788"></p>
<ul>
<li>注意:<ul>
<li>操作系统的<font color='red'>内核</font>需要运行在<font color='red'>内核态</font></li>
<li>操作系统的<font color='red'>非内核</font>需要运行在<font color='red'>用户态</font></li>
</ul>
</li>
</ul>
<h1 id="操作系统体系结构"><a href="#操作系统体系结构" class="headerlink" title="操作系统体系结构"></a>操作系统体系结构</h1><pre class="mermaid">graph LR;
1[操作系统体系结构]-->2[大内核];
1-->3[微内核];
1-->4[分层结构];
1-->5[模块化];
1-->6[外核]</pre>



<p><img src="https://s2.loli.net/2024/05/22/YzgXlKNtDn3Wie8.png" alt="image-20240211222505797"></p>
<h1 id="系统引导"><a href="#系统引导" class="headerlink" title="系统引导"></a>系统引导</h1><p><img src="https://s2.loli.net/2024/05/22/ENvFdV9sl58gCyb.png" alt="image-20240211224859034"></p>
<h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><p><font color='orange'>虚拟机</font>: 使用虚拟化技术,将一台物理机器虚拟化为多台机器(Virtual Machine, VM),每个虚拟机都可以独立运行一个操作系统</p>
<h2 id="第一类虚拟机管理程序"><a href="#第一类虚拟机管理程序" class="headerlink" title="第一类虚拟机管理程序"></a>第一类虚拟机管理程序</h2><p><img src="https://s2.loli.net/2024/05/22/3aMLdjO6ZSxTnfi.png" alt="image-20240211225652570"></p>
<ul>
<li>本质上可以理解为更深一层的套娃，VMM 运行在真正的内核态，将硬件资源划分分配给各个系统，把 CPU 时钟切片分配。</li>
<li>系统事实上运行在用户态，当其调用特权指令时会被 VMM 截获，并被 VMM 等效实现响应且返回给系统，在结果上等价于系统成功调用特权指令</li>
</ul>
<h2 id="第二类虚拟机管理程序"><a href="#第二类虚拟机管理程序" class="headerlink" title="第二类虚拟机管理程序"></a>第二类虚拟机管理程序</h2><p><img src="https://s2.loli.net/2024/05/22/7BQwtGYxduHy8IF.png" alt="image-20240211230309077"></p>
<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><img src="https://s2.loli.net/2024/05/22/c3Ha6lImVNDBEA7.png" alt="image-20240211231007857"></p>
<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p><font color='orange'>程序</font>：是<font color='red'>静态的</font>，存放在磁盘里的可执行文件，是一系列的指令集合</p>
<p><font color='orange'>进程</font>：是<font color='red'>动态的</font>，是程序的一次执行过程</p>
<p><font color='orange'>PID</font>：进程被创建时，被赋予的唯一标识编码</p>
<p><font color='orange'>PCB</font>：<font color='red'>进程控制块</font>，保存进程信息的数据结构，记录了cpu使用时间、磁盘使用情况、网络流量等等信息</p>
<p>&#x3D;&#x3D;PCB是进程存在的唯一标志&#x3D;&#x3D;</p>
<pre class="mermaid">graph LR;
1[PCB]-->2[进程描述信息]-->3[进程标识符];
2-->4[用户标识符UID];
1-->5[进程控制和管理信息]-->CPU/磁盘/网络流量
5-->进程当前状态:就绪态/阻塞态/运行态
1-->7[资源分配清单]-->正在使用哪些文件
7-->正在使用哪些内存区域;
7-->正在使用哪些I/O设备
1-->8[处理机相关信息]-->PSW/PC等等寄存器的值</pre>







<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><pre class="mermaid">graph LR;
1[进程的组成]-->2[PCB]-->a(进程描述信息)
2-->b(进程控制和管理信息)
2-->c(资源分配清单)
2-->d(处理机相关信息)
1-->3[程序段]-->e[程序的代码<指令序列>]
1-->数据段-->f(运行过程中产生的各种数据)</pre>





<h2 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h2><pre class="mermaid">graph LR;
1[进程的特征]-->2[动态性]-->a[进程是程序的一次执行过程,是动态产生,变化和消亡的]
1-->并发性-->b[内存种有多个进程实体,各进程可以并发执行]
1-->独立性-->c(进程是能独立运行,独立获取资源,独立接受调度的基本单位)
1-->异步性-->3[各进程按各自独立的,不可预知的速度向前推进<br>操作系统要提供'进程同步机制'解决异步问题]
1-->结构性-->d(每个进程都会配置一个PCB,结构上,进程有程序段,数据段,PCB构成)</pre>

<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><pre class="mermaid">graph LR;
1[进程的状态与转换]-->2[状态];
2-->8[创建状态];
2-->9[终止状态];
2-->i[基础状态];
1-->3[状态的转换];
1-->4(各个进程PCB的组织方式);

i-->5[运行状态];
i-->6[就绪状态];
i-->7[阻塞状态];
3-->a[就绪态->运行态];
3-->b[运行态->就绪态];
3-->c[运行态->阻塞态];
3-->d[阻塞bn态->就绪a态];</pre>

<h3 id="状态-1"><a href="#状态-1" class="headerlink" title="状态"></a>状态</h3><ul>
<li>进程正在被创建时,它的状态是”<font color='red'>创建态</font>“，在这个阶段系统会进行资源分配、初始化 PCB</li>
<li>进程完成创建后，就进入“<font color='red'>就绪态</font>”，处于就绪态的进程已经具备运行条件，但是暂无空闲CPU，就无法运行</li>
<li>“<font color='red'>运行态</font>”指一个进程此时在 CPU 上运行，CPU会执行该进程对应的程序（执行指令序列）</li>
<li>当进程运行过程中请求CPU分配系统资源，此时可能发生系统繁忙，无可用资源分配的情况（例如打印机被其他进程占用），那么进程就无法继续运行，此时进程会主动调用系统接口, 让操作系统停止运行该进程，进程进入“<font color='red'>阻塞态</font>”</li>
<li>一个进程可以执行 <code>exit</code> 系统调用,请求操作系统终止该进程,此时该进程进入”<font color='red'>终止态</font>“</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;进程PCB中,会有一个变量state表示进程的当前状态&#x3D;&#x3D;</p>
</blockquote>
<h3 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h3><blockquote>
<ol>
<li>进程用”系统调用”的方式申请某种系统资源,或者请求等待某个事件发生时会由<strong>运行态</strong>转为<strong>阻塞态</strong></li>
<li><strong>运行态</strong>到<strong>阻塞态</strong>时一种进程自身做出的<font color='red'>主动行为</font></li>
<li><strong>阻塞态</strong>到<strong>运行态</strong>是不能由进程自身控制的,是<font color='red'>被动行为</font></li>
<li><strong>运行态</strong>到<strong>就绪态</strong>有时可以互相直接转换，当cpu时间片耗尽时，进程跳转会就绪态等待下一次调度</li>
</ol>
</blockquote>
<pre class="mermaid">graph LR;
a([创建态])--完成创建-->b([就绪态])
b--进程被调度-->c([运行态])
c--时间片结束-->b
c-->e([终止态])
c--请求等待响应-->d([阻塞态])
d--请求被回应-->b;</pre>

<h3 id="进程组织"><a href="#进程组织" class="headerlink" title="进程组织"></a>进程组织</h3><pre class="mermaid">graph LR;
1[进程的组织方式]-->2[链接方式];
1-->3[索引方式];
2-->a[按址进程状态将PCB分为多个队列]
2-->b[操作系统持有指向各个队列的指针]
3-->c[根据进程状态的不同,建立索引表]
3-->d[操作系统持有指向各个索引表的指针]</pre>



<ul>
<li>链式组织</li>
</ul>
<p><img src="https://s2.loli.net/2024/05/22/JRu8gP1YUX4xDid.png" alt="image-20240213221413072"></p>
<ul>
<li>索引组织</li>
</ul>
<p><img src="https://s2.loli.net/2024/05/22/kaFnT2zElhysKui.png" alt="image-20240213221436609"></p>
<h2 id="控制-实现状态转换"><a href="#控制-实现状态转换" class="headerlink" title="控制(实现状态转换)"></a>控制(实现状态转换)</h2><ul>
<li><p>进程的状态转换,需要<font color='red'>一步到位</font>,不能出现阻塞队列的某个进程PCB的<strong>state</strong>属性已经时<strong>就绪态</strong>了,但进程仍处在阻塞队列中</p>
</li>
<li><p><font color='red'>关中断指令</font>和<font color='red'>开中断指令</font>都是<font color='red'>特权指令</font>，可实现其中的指令不被中断，一步到位</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2024/05/22/ybFMmSejJh7q8Dp.png" alt="image-20240213222510106"></p>
<h3 id="创建到就绪"><a href="#创建到就绪" class="headerlink" title="创建到就绪"></a>创建到就绪</h3><pre class="mermaid">graph LR;
1(进程的创建)-->2[创建原语];
1-->3[引起进程创建的事件];
2-->申请空白PCB
2-->为新进程分配资源
2-->初始化PCB
2-->将PCB插入就绪队列
3-->a[用户登录<br>分时系统中,用户登录成功,系统为其创建一个新的进程]
3-->b[作用调度<br>多道批处理系统中,有新的作业放入内存,会为其创建新的进程]
3-->c[提供服务<br>用户向系统提出某些请求时,会新建一个进程处理该请求]
3-->d[应用请求<br>用户进程主动请求创建一个新进程]</pre>



<h3 id="运行到终止"><a href="#运行到终止" class="headerlink" title="运行到终止"></a>运行到终止</h3><pre class="mermaid">graph LR;
1[进程的终止]-->2[撤销原语];
2-->从PCB集合中找到终止进程的PCB;
2-->若进程正在运行,立即剥夺CPU,将CPU分配其他进程
2-->终止其所有字进程
2-->将该进程拥有的所有资源归还给父进程或操作系统
2-->删除PCB
1-->3[引起进程终止的事件]
3-->正常结束
3-->异常结束
3-->外界干预</pre>



<h3 id="运行到阻塞，阻塞到就绪"><a href="#运行到阻塞，阻塞到就绪" class="headerlink" title="运行到阻塞，阻塞到就绪"></a>运行到阻塞，阻塞到就绪</h3><ul>
<li><font color='orange'>阻塞原语</font>和<font color='orange'>唤醒原语</font>必须成对使用，因为进程由什么事件而阻塞就需要什么事件来唤醒</li>
</ul>
<pre class="mermaid">graph LR;
1[进程的阻塞和唤醒]-->2[进程的阻塞]
4-->找到要阻塞的进程的PCB
4-->a[保护进程运行现场,将PCB状态信息置为'阻塞态'<br>暂时停止进程运行]
4-->将PCB插入相应事件的等待队列
1-->3[基础的唤醒]
2-->4[阻塞原语]
2-->5[引起进程阻塞的事件]
5-->需要等待系统分配某种资源
5-->需要等待相互合作的其他进程完成工作
3-->6[唤醒原语]
6-->在事件等待队列中找到PCB
6-->将PCB从等待队列移除,设置进程为就绪态
6-->将PCB插入就绪队列,等待调度
3-->7[引起进程唤醒的事件]
7-->等待的事件发生</pre>

<h3 id="运行到就绪，就绪到运行"><a href="#运行到就绪，就绪到运行" class="headerlink" title="运行到就绪，就绪到运行"></a>运行到就绪，就绪到运行</h3><pre class="mermaid">graph LR;
1[进程的切换]-->2[切换原语];
1-->3[引起进程切换的事件];
2-->a[将运行现场信息存入PCB]
2-->PCB移入相应队列
2-->选择下一个进程执行,并更新其PCB
2-->b[根据PCB恢复新进程所需环境<恢复现场>]
3-->当进程时间片结束
3-->有更高优先级的进程到达
3-->当前进程主动阻塞
3-->当前进程终止</pre>

<h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><ul>
<li><font color='orange'>进程间通信</font>（Inter-Process Communication），指两个进程之间产生数据交互</li>
</ul>
<pre class="mermaid">graph LR;
1[进程通信]-->2[共享存储]
2-->基于数据结构的共享
2-->基于存储区的共享
1-->3[消息传递]
3-->直接通信方式
3-->间接通信方式
1-->管道通信</pre>

<h3 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h3><p><img src="https://s2.loli.net/2024/05/22/Hbfg7lQOkNwXmnT.png" alt="image-20240213230520582"></p>
<ul>
<li>进程之间共享存储,需要确保<font color='red'>不同进程</font>对存储空间的<font color='red'>访问(写入)</font>是<font color='red'>互斥</font>的</li>
</ul>
<p><strong>基于数据结构的共享</strong></p>
<p>​	共享空间里只能使用<font color='red'>固定</font>的<font color='red'>格式(数据类型)</font>，共享速度<font color='red'>慢</font>，限制多，是一种<font color='red'>低级通信</font>方式</p>
<p><strong>基于存储区的共享</strong></p>
<p>​	操作系统在<font color='red'>内存</font>中划出一片共享存储区，数据的类型、位置都由通信进程控制，而非操作系统，共享速度<font color='red'>快</font>，是一种<font color='red'>高级通信</font>方式</p>
<h3 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h3><p><img src="https://s2.loli.net/2024/05/22/DSldjHLvgkCwYe8.png" alt="image-20240213231503280"></p>
<ul>
<li>进程间的数据交互以<font color='red'>格式化的信息</font>为单位，进程通过操作系统提供的“发送消息&#x2F;接受消息”两个<font color='red'>原语</font>进行数据交换</li>
</ul>
<p><strong>直接通信方式</strong></p>
<p>​	要指明<font color='red'>接受进程</font>的 <font color='red'>PID</font></p>
<p><strong>间接通信方式</strong></p>
<p>​	通过”<font color='red'>信箱</font>“间接地通信,因此又称”信箱通信方式”</p>
<h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><p><img src="https://s2.loli.net/2024/05/22/Tgk2YF6uPiZmLfA.png" alt="image-20240213232444500"></p>
<ul>
<li>管道通信,本质上是一个特殊的共享文件,又名 <code>pipe</code> 文件,即在内存中开辟一个<font color='red'>大小固定</font>的<font color='red'>内存缓存区</font>,其遵循<font color='red'>先进先出</font>原则</li>
<li>管道通信是<font color='red'>半双工通信</font>,一段时间内只能实现单向数据传输,若需要<font color='red'>双向同时通信</font>,则<font color='red'>必须设置两个管道</font></li>
<li><strong>注意</strong>: 管道并非是临时创建,管道的分配由系统实现,需要控制各个进程<font color='red'>互斥</font>的使用管道</li>
<li>当<font color='red'>管道写满</font>时,<font color='red'>写进程</font>将<font color='red'>阻塞</font>,直到读进程把管道中的数据取走</li>
<li>当<font color='red'>管道读空</font>时,<font color='red'>读进程</font>将<font color='red'>阻塞</font>,直到写进程向管道中写入新数据</li>
<li>管道中的<font color='red'>数据一旦读出,就彻底消失</font>,因此,当多个进程读同一个管道时,可能引发错误.</li>
<li>&#x3D;&#x3D;管道允许多个进程写入,一个进程读出&#x3D;&#x3D;</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>进程通信<ul>
<li>共享存储<ul>
<li>设置一个共享存储区, 进程将其映射到自己的虚拟存储地址空间</li>
<li>进程之间要互斥的访问共享存储区(由通信双方进程自己实现, 借助系统提供的pv互斥工具)</li>
<li>&#x3D;&#x3D;两个方式&#x3D;&#x3D;<ol>
<li>基于数据结构(灵活性差)</li>
<li>基于存储区(灵活)</li>
</ol>
</li>
</ul>
</li>
<li>消息传递<ul>
<li>传递结构化消息(包含消息头&#x2F;消息体)</li>
<li>系统提供<strong>发送</strong>和<strong>接受</strong>原语</li>
<li>&#x3D;&#x3D;两个方式&#x3D;&#x3D;<ol>
<li>直接通信: 消息放入接收进程的消息队列中</li>
<li>间接通信: 消息先放入中间体(内核信箱)</li>
</ol>
</li>
</ul>
</li>
<li>管道通信<ul>
<li>设置特殊的管道文件作为内存缓存区</li>
<li>一个管道只能实现半双工通信</li>
<li>双工通信需两个管道</li>
<li>各进程需互斥访问管道(由操作系统实现互斥)</li>
<li>&#x3D;&#x3D;管道写满、读空时, 将触发进程阻塞&#x3D;&#x3D;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="进程调度方式"><a href="#进程调度方式" class="headerlink" title="进程调度方式"></a>进程调度方式</h2><ul>
<li><p>非剥夺调度方式</p>
<ul>
<li><p>只允许进程主动放弃处理机资源, 再运行过程中即便由优先级更高的任务到达, 当前进程仍然会继续占用处理机, 直至该进程主动请求进入阻塞态</p>
<blockquote>
<p>&#x3D;&#x3D;特点&#x3D;&#x3D;</p>
<ol>
<li><p>适用于早起批处理系统</p>
</li>
<li><p>实现简单, 系统开销小, 无法及时处理紧急任务</p>
</li>
</ol>
</blockquote>
</li>
</ul>
</li>
<li><p>剥夺调度方式</p>
<ul>
<li><p>当一个进程正在处理机上运行时, 若由更紧迫的进程需要使用处理机, 则立刻暂停当前执行的进程, 将处理机分配给那个更紧迫的进程</p>
<blockquote>
<p>&#x3D;&#x3D;特点&#x3D;&#x3D;</p>
<ol>
<li>可以优先处理紧急任务, 也能实现各个进程按时间分片轮流执行</li>
<li>适用于分时操作系统、实时操作系统</li>
</ol>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="调度算法评价指标"><a href="#调度算法评价指标" class="headerlink" title="调度算法评价指标"></a>调度算法评价指标</h2><pre class="mermaid">graph LR;
1[评价指标]-->2[CPU利用率];
1-->3[系统吞吐量];
1-->4[周转时间];
1-->5[等待时间];
1-->6[响应时间];</pre>

<blockquote>
<p>&#x3D;&#x3D;注意&#x3D;&#x3D;</p>
<p>等待时间对于<strong>进程</strong>和<strong>作业</strong>是不同的</p>
<ol>
<li>对于进程, 等待时间是指进程创建后等待服务的时间之和, 等待 I&#x2F;O 完成的期间其实也是在被服务, 因此不计入等待时间</li>
<li>对于作业, 等待时间包括建立进程后的等待时间以及作业在外存PCB队列中的等待时间</li>
</ol>
</blockquote>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><pre class="mermaid">graph LR;
1[线程功能]-->2[资源分配/调度];
1-->3[并发性];
1-->4[系统开销];</pre>

<h2 id="线程的功能"><a href="#线程的功能" class="headerlink" title="线程的功能"></a>线程的功能</h2><ul>
<li><p>资源分配、调度方面</p>
<ul>
<li>传统进程机制中，进程是资源分配、调度的基本单位</li>
<li>引入线程后，进程是资源分配的基本单位，线程是调度的基本单位</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;理解&#x3D;&#x3D;</p>
<p>如今, 进程主要用于向系统请求分配系统资源的工具</p>
<p>处理机调度执行的单位变为了进程里的线程</p>
</blockquote>
</li>
<li><p>并发性方面</p>
<ul>
<li>传统进程机制中,只能进程间并发</li>
<li>引入线程后, 各线程也能并发, 提升了并发度</li>
</ul>
</li>
<li><p>系统开销方面</p>
<ul>
<li>传统的进程间并发, 需要切换进程允许环境, 系统开销大</li>
<li>线程间并发, 若是同一个进程中线程的切换, 则无需切换进程允许环境,系统开销小</li>
<li>&#x3D;&#x3D;引入线程后, 并发带来的系统开销减少&#x3D;&#x3D;</li>
</ul>
</li>
</ul>
<h2 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h2><ul>
<li>线程是处理机调度的单位</li>
<li>多 CPU 计算机中, 各个线程可占用不同 CPU</li>
<li>每个线程都有一个线程id、线程控制块（TCB）</li>
<li>线程也有就绪、堵塞、运行三种基本状态</li>
<li>线程几乎不拥有系统资源</li>
<li>同一进程的不同线程之间共享进程的系统资源</li>
<li>由于共享内存地址空间、同一进程中的线程间通信甚至无需系统介入干预</li>
<li>同一进程中的线程切换，不会引起进程切换</li>
<li>不同进程中的线程切换，会引起进程切换</li>
<li>切换同进程中的线程，系统开销很小</li>
<li>切换进程，系统开销较大</li>
</ul>
<h2 id="线程实现方式"><a href="#线程实现方式" class="headerlink" title="线程实现方式"></a>线程实现方式</h2><pre class="mermaid">graph LR;
1[线程实现]-->2[用户级线程];
2-->4[切换线程无需切换cpu运行状态];
2-->5[线程管理由用户自行完成];
2-->6[线程对操作系统透明];
1-->3[内核级线程];
3-->a[线程管理由系统内核完成];
3-->b[线程切换必须在核心态下完成];
3-->c[操作系统可以发现线程];</pre>



<ul>
<li><p>内核级线程</p>
<ul>
<li>优点<ul>
<li>一个线程被阻塞后, 别的线程可以继续执行, 并发能力强</li>
<li>多个线程可以在多核处理机上<code>并行</code>执行</li>
</ul>
</li>
</ul>
</li>
<li><p>用户级线程</p>
<ul>
<li>优点<ul>
<li>用户级线程切换在进程空间内即可完成, 无需改变cpu运行状态,开销小效率高</li>
</ul>
</li>
<li>缺点<ul>
<li>一个用户线程被阻塞后, 整个进程都会被阻塞, 并发度不高, <strong>多个线程不能在多核处理机上并行运行</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p><img src="https://s2.loli.net/2024/05/22/CVWofj3pgtSGzY4.png" alt="image-20240522115240603"></p>
<ul>
<li>一对一模型<ul>
<li>一个用户级线程映射到一个内核级线程, 每个用户进程由与用户线程同数量的内核级线程</li>
<li>优点<ul>
<li>一个线程被阻塞, 别的线程还可以继续运行, 并发能力强</li>
<li>多线程可在多核处理机上并行运行</li>
</ul>
</li>
<li>缺点<ul>
<li>一个用户进程会占用过多内核级线程</li>
<li>线程切换由系统完成, 用户切换线程需要改变cpu运行状态, 因此管理成本高, 效率低</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p><img src="https://s2.loli.net/2024/05/22/TF8yWIZf7SscX3m.png" alt="image-20240522115322050"></p>
<ul>
<li>多对一模型<ul>
<li>多个用户线程映射到一个内核级线程,且默认一个进程只分配一个内核级线程</li>
<li>优点<ul>
<li>用户级线程的切换在用户空间内完成, 无需改变cpu运行状态, 线程管理成本低, 效率高</li>
</ul>
</li>
<li>缺点<ul>
<li>一个用户线程阻塞后, 整个进程阻塞, 并发度低, 多线程不可再多核处理机上并行运行</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p><img src="https://s2.loli.net/2024/05/22/iecR6Joty9A83bs.png" alt="image-20240522140543542"></p>
<ul>
<li>多对多模型<ul>
<li>n 个用户线程映射到 m 个内核级线程上&#x3D;&#x3D;($n&gt;&#x3D;m$)&#x3D;&#x3D;, 每个用户进程对应 m 个内核级线程</li>
<li>优点<ul>
<li>克服了多对一模型并发度不高的缺点, 又克服了一对一模型中一个用户进程占用过多内核级线程,开销太大的缺点</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="线程的组织与控制"><a href="#线程的组织与控制" class="headerlink" title="线程的组织与控制"></a>线程的组织与控制</h2><pre class="mermaid">graph LR;
1[TCB]-->2[线程标识符TID];
1-->3[程序计数器PC];
1-->4[其他寄存器];
1-->5[堆栈指针];
1-->6[线程运行状态: 就绪/运行/堵塞];
1-->7[优先级];</pre>

<blockquote>
<p>线程三种组织方式</p>
<ol>
<li>每个进程包含一张线程表</li>
<li>所有进程公用一张线程表</li>
<li>不同运行状态的线程使用不同的线程表</li>
</ol>
</blockquote>
<h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><ul>
<li><p>低级调度</p>
<ul>
<li>按照某种策略从就绪队列中选取一个进程, 将处理机分配资源给他</li>
</ul>
</li>
<li><p>中级调度</p>
<ul>
<li>系统内存不足时, 可将某些进程的数据调出外存, 等待内存空闲或者进程需要运行时再重新调入内存</li>
<li>暂时调到外存等待的进程状态为&#x3D;&#x3D;挂起状态&#x3D;&#x3D;, 被挂起的进程 PCB 会被组织成 &#x3D;&#x3D;挂起队列&#x3D;&#x3D;, 类似阻塞态,阻塞队列</li>
</ul>
</li>
<li><p>高级调度</p>
<ul>
<li>按一定原则从外存的作业后备队列中选取一个作业调入内存,并创建进程</li>
<li>&#x3D;&#x3D;每个作业的生命周期内只会被调入内存一次,调出内存一次&#x3D;&#x3D;</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;理解&#x3D;&#x3D;</p>
<p>用户同时执行多个作业任务时, 而系统资源不足时, 根据调度原则选择作业的调入执行顺序</p>
<p>调入执行创建进程PCB</p>
<p>调出执行销毁进程PCB</p>
</blockquote>
</li>
</ul>
<p><img src="https://s2.loli.net/2024/05/22/iRJwBkCjvsuUzEy.png" alt="image-20240522143219111"></p>
<p><img src="https://s2.loli.net/2024/05/22/aoZMQmyY2Xbdj4N.png" alt="image-20240522143318361"></p>
<blockquote>
<p>&#x3D;&#x3D;重要概念&#x3D;&#x3D;</p>
<p>临界资源: 一个时间段只允许一个进程使用的资源, 各进程需要互斥的访问临界资源</p>
<p>内核程序临界区: 一般是用于 某种内核数据结构, 例如就绪队列</p>
<p>普通程序临界区: 例如打印机, 不影响操作系统内核的管理工作, 因此内核仍可以进行调度核切换</p>
</blockquote>
<h1 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h1><h2 id="FCFS"><a href="#FCFS" class="headerlink" title="FCFS"></a>FCFS</h2><ul>
<li>&#x3D;&#x3D;先来先服务(First Come First Serve)&#x3D;&#x3D;</li>
<li>&#x3D;&#x3D;优点&#x3D;&#x3D;<ul>
<li>公平, 实现简单</li>
</ul>
</li>
<li>&#x3D;&#x3D;缺点&#x3D;&#x3D;<ul>
<li>排在长作业(进程)后的短作业需等待很长时间, <strong>带权周转时间很大</strong></li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2024/05/22/ebAUhvkaroPqQKz.png" alt="image-20240522200005818"></p>
<h2 id="SJF"><a href="#SJF" class="headerlink" title="SJF"></a>SJF</h2><ul>
<li><p>&#x3D;&#x3D;短作业优先(Shortest Job First)&#x3D;&#x3D;</p>
</li>
<li><p>追求<strong>最少的平均等待时间</strong></p>
</li>
<li><p>可能发生饥饿</p>
</li>
<li><p>&#x3D;&#x3D;优点&#x3D;&#x3D;</p>
<ul>
<li>“最短的”平均等待时间, 平均周转时间</li>
</ul>
<blockquote>
<p>“最短的” 不严谨, 某些情况下**最短剩余时间算法STRN(抢占式SJF, 又称SRTN)**可以得到更短的平均等待时间, 平均周转时间</p>
</blockquote>
</li>
<li><p>&#x3D;&#x3D;缺点&#x3D;&#x3D;</p>
<ul>
<li>不公平, 对短作业有利, 对长作业不利</li>
</ul>
</li>
</ul>
<h3 id="非抢占式"><a href="#非抢占式" class="headerlink" title="非抢占式"></a>非抢占式</h3><p> <img src="https://s2.loli.net/2024/05/22/jrlSJN6EqK8bsFW.png" alt="image-20240522204416023"></p>
<h3 id="抢占式"><a href="#抢占式" class="headerlink" title="抢占式"></a>抢占式</h3><p><img src="https://s2.loli.net/2024/05/22/wdUehtCnTDMJo5Q.png" alt="image-20240522205207761"></p>
<p><img src="https://s2.loli.net/2024/05/22/yY6ohFkWSgnXr9t.png" alt="image-20240522205226322"></p>
<h2 id="HRRN"><a href="#HRRN" class="headerlink" title="HRRN"></a>HRRN</h2><ul>
<li>&#x3D;&#x3D;高响应比优先(Highest Response Ratio Next)&#x3D;&#x3D;</li>
<li>特点:<ul>
<li>非抢占式</li>
<li>每次调度选择当前响应比最高的进程执行</li>
</ul>
</li>
</ul>
<p><strong>响应比</strong>:<br>$$<br>响应比&#x3D;\frac{等待时间+要求服务时间}{要求服务时间}<br>$$</p>
<p><strong>带权周转时间</strong><br>$$<br>带权周转时间&#x3D;\frac{作业周转时间}{作业实际运行实际}<br>$$<br><img src="https://s2.loli.net/2024/05/22/N76y4rCquW1mUnw.png" alt="image-20240522212323390"></p>
<h2 id="RR"><a href="#RR" class="headerlink" title="RR"></a>RR</h2><ul>
<li>&#x3D;&#x3D;时间片轮转调度算法&#x3D;&#x3D;</li>
<li>抢占式算法</li>
<li>伴随分时操作系统的诞生而生</li>
<li>&#x3D;&#x3D;优点&#x3D;&#x3D;<ul>
<li>响应快, 适用于分时操作系统</li>
</ul>
</li>
<li>&#x3D;&#x3D;缺点&#x3D;&#x3D;<ul>
<li>由于高频率的进程切换,因此有一定系统额外开销</li>
<li>不区分进程优先级</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2024/05/22/pGWUQ1qJbfrIw92.png" alt="image-20240522213911300"></p>
<p><img src="https://s2.loli.net/2024/05/22/D2Vu6pKwTqMGoSF.png" alt="image-20240522213926723"></p>
<blockquote>
<p>&#x3D;&#x3D;时间片过大&#x3D;&#x3D;</p>
<p>每个进程都可以在一个时间片中执行完成, 则时间轮转算法<strong>退化为先来先服务算法</strong>, 增大进程响应时间</p>
<p>&#x3D;&#x3D;时间片过小&#x3D;&#x3D;</p>
<p><strong>导致进程切换过于频繁</strong>, 造成大量不必要的系统开销, 使得实际用于进程执行的时间比例减少</p>
<p>&#x3D;&#x3D;一般而言,设计时间片大小应该使得切换进程的开销占比不超过 $1%$&#x3D;&#x3D;</p>
</blockquote>
<h2 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h2><ul>
<li>每个作业&#x2F;进程都有各自的优先级</li>
<li>调度时选择优先级最高的进程&#x2F;作业</li>
<li>抢占式 or 非抢占式</li>
<li>可能导致饥饿</li>
<li>&#x3D;&#x3D;优点&#x3D;&#x3D;<ul>
<li>可以用优先级区别紧急程度、重要程度，适用于实时操作系统</li>
</ul>
</li>
<li>&#x3D;&#x3D;缺点&#x3D;&#x3D;<ul>
<li>若源源不断有高优先级进程到来，可能导致饥饿</li>
</ul>
</li>
</ul>
<h3 id="非抢占式-1"><a href="#非抢占式-1" class="headerlink" title="非抢占式"></a>非抢占式</h3><p><img src="https://s2.loli.net/2024/05/22/BzD2Tx98MCF6sjI.png" alt="image-20240522220105790"></p>
<h3 id="抢占式-1"><a href="#抢占式-1" class="headerlink" title="抢占式"></a>抢占式</h3><p><img src="https://s2.loli.net/2024/05/22/iHwSVQTINLP9o7O.png" alt="image-20240522220333030"></p>
<blockquote>
<p>&#x3D;&#x3D;补充&#x3D;&#x3D;</p>
<ul>
<li>就绪队列未必只有一个, 可以按照不同优先级组织, 另外,还可以将优先级更高的进程安排在更靠对头的位置</li>
<li>根据优先级是否可以动态变化, 可将优先级分为<strong>静态优先级</strong>和<strong>动态优先级</strong><ul>
<li>静态优先级: 进程创建后, 优先级一直不变</li>
<li>动态优先级: 进程创建后, 优先级根据情况动态发生变化</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="多级反馈队列调度"><a href="#多级反馈队列调度" class="headerlink" title="多级反馈队列调度"></a>多级反馈队列调度</h2><ul>
<li><p>设置多级就绪队列，各级队列<strong>优先级</strong>从<strong>高到低</strong>，<strong>时间片</strong>从<strong>小到大</strong></p>
</li>
<li><p>新进程到达，先进入第一级队列，按 <strong>FCFS</strong> 原则排队等待分配时间片，若时间片结束<strong>仍未完成</strong>，则进程调入<strong>下一级队列队尾</strong>，若此时已经处于最下级队列，则重新放入最下级队列队尾</p>
</li>
<li><p><strong>抢占式算法</strong></p>
</li>
<li><p>&#x3D;&#x3D;只有前 $n$ 个优先级队列为空, 才会从第 $n+1$ 级队头开始分配时间片&#x3D;&#x3D;</p>
</li>
<li><p>可能导致饥饿</p>
</li>
<li><p>&#x3D;&#x3D;优点&#x3D;&#x3D;</p>
<ul>
<li>对各类型进程相对公平(<strong>FCFS优点</strong>, 等待时间较少)</li>
<li>每个新到达的进程都可以很快得到响应(<strong>RR优点</strong>)</li>
<li>短进程只用较少时间就可完成(<strong>SPF优点</strong>, 运行时间较少)</li>
<li>不必实现估计进程的运行时间(<strong>避免用户伪造运行时间预期</strong>)</li>
<li>&#x3D;&#x3D;动态调整各类进程的偏好程度&#x3D;&#x3D;<ul>
<li>例如: I&#x2F;O 密集型进程因 I&#x2F;O 阻塞, 可以将其重新放入原队列中去, 因此 I&#x2F;O 密集型进程可以长期保持较高优先级</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="多级队列调度"><a href="#多级队列调度" class="headerlink" title="多级队列调度"></a>多级队列调度</h2><ul>
<li>系统按照进程类型设置多个队列</li>
<li>队列之间可采用固定优先级, 或者按时间片划分<ul>
<li>固定优先级: 高优先级进程为空时, 低优先级才能被调度</li>
<li>时间片划分: 多个队列按照一个比例划分一个时间片, 例如: 50%, 40%, 10%</li>
</ul>
</li>
<li>&#x3D;&#x3D;各队列可采用不同调度策略&#x3D;&#x3D;<ul>
<li>系统进程采用 <strong>优先级调度</strong></li>
<li>交互进程采用 <strong>RR</strong></li>
<li>批处理进程采用 <strong>FCFS</strong></li>
</ul>
</li>
</ul>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>SJF: 优先考虑服务时间, 要求服务时间短的优先</p>
<p>FCFS: 优先考虑等待时间, 要求等待时间长的优先</p>
<p>HRRN: 综合考虑等待时间和服务时间, 对于长作业而言, 等待时间越长, 响应比越大</p>
<p>通常情况下: 💢</p>
<ul>
<li>系统进程优先级 <strong>高于</strong> 用户进程</li>
<li>前台进程优先级 <strong>高于</strong> 后台进程</li>
<li>操作系统更偏好 <strong>I&#x2F;O</strong> 型进程, 也称 &#x3D;&#x3D;I&#x2F;O 密集型进程&#x3D;&#x3D;, 相对的有 <strong>计算型</strong> 进程, 也称 &#x3D;&#x3D;CPU 密集型进程&#x3D;&#x3D;</li>
</ul>
</blockquote>
<p><img src="https://s2.loli.net/2024/05/22/MYmLDK5wA9E7sFr.png" alt="image-20240522213049586"></p>
<p><img src="https://s2.loli.net/2024/05/22/PExjTdHyi1kNBCG.png" alt="image-20240522222828395"> </p>
<h1 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul>
<li><p>对<strong>临界资源</strong>的互斥访问, 逻辑上可分四个部分</p>
<ul>
<li>进入区: 检查是否可以进入 <strong>临界区</strong>, 若可进入, 应设置正在访问临界资源的标志(<strong>上锁</strong>)</li>
<li>临界区: 关于访问互斥资源的代码</li>
<li>退出区: 负责解除正在访问临界资源的标志(<strong>解锁</strong>)</li>
<li>剩余区: 其他处理</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    entry section;  	<span class="comment">//进入区</span></span><br><span class="line">    critical section;	<span class="comment">//临界区</span></span><br><span class="line">    exit section;		<span class="comment">//退出区</span></span><br><span class="line">    remainder section;	<span class="comment">//剩余区</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>临界资源的互斥访问应遵守以下原则</p>
<ol>
<li>空闲让进<ul>
<li>临界区空闲时, 可以允许一个请求进入临界区访问资源</li>
</ul>
</li>
<li>忙则等待<ul>
<li>当已有进程进入临界区,其他试图进入临界区的进程必须等待</li>
</ul>
</li>
<li>有限等地<ul>
<li>对请求访问的进程, 应保证能再有限时间内能够访问临界资源(保证不饥饿)</li>
</ul>
</li>
<li>让权等待<ul>
<li>当进程不能进入临界区时, 应立即释放处理机, 防止进程忙等待</li>
</ul>
</li>
</ol>
</blockquote>
</li>
</ul>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><h4 id="单标志法"><a href="#单标志法" class="headerlink" title="单标志法"></a>单标志法</h4><ul>
<li>两个进程在访问完临界区后, 会将使用临界区的权限交给另一进程, &#x3D;&#x3D;即每个进程访问临界区的权限只能来自于另一个进程&#x3D;&#x3D;</li>
</ul>
<blockquote>
<p><strong>存在问题(缺点)</strong></p>
<p>&#x3D;&#x3D;违背了 “空闲让进” 原则, 如果 a 进程将权限让权给了 b, 但 b 进程又一直不访问临界区, 则 a 进程就会一直得不到访问权限, 因为访问权限只能来着与 b 进程&#x3D;&#x3D;</p>
</blockquote>
<p><img src="https://s2.loli.net/2024/05/24/t4e91kXwpDm82xH.png" alt="image-20240524113120727"></p>
<h4 id="双标志先检查"><a href="#双标志先检查" class="headerlink" title="双标志先检查"></a>双标志先检查</h4><ul>
<li>设置一个布尔值数组 $flag[]$ , 数组中各个元素用于标记各进程对于访问临界区的意愿, $1$ 表示有意愿, $0$ 表示无意愿</li>
</ul>
<blockquote>
<p><strong>存在问题(缺点)</strong></p>
<p>&#x3D;&#x3D;违反了 “忙则等待” 的原则&#x3D;&#x3D;</p>
</blockquote>
<p><img src="https://s2.loli.net/2024/05/24/qPAcMlsgUu2WFT9.png" alt="image-20240524113807223"></p>
<h4 id="双标志后检查"><a href="#双标志后检查" class="headerlink" title="双标志后检查"></a>双标志后检查</h4><ul>
<li>同双标志先检查法一样, 设置布尔值数组 $flag[]$, 不同点在于<strong>双标志后检查</strong>先表达意愿(上锁), 再检查是否可以访问</li>
</ul>
<blockquote>
<p><strong>存在问题(缺点)</strong></p>
<p>&#x3D;&#x3D;违背 “空闲让进, 有限等待” 原则&#x3D;&#x3D;</p>
</blockquote>
<p><img src="https://s2.loli.net/2024/05/24/g7p4CyRaqUGxnsr.png" alt="image-20240524114214026"></p>
<h4 id="Peterson-算法"><a href="#Peterson-算法" class="headerlink" title="Peterson 算法"></a>Peterson 算法</h4><blockquote>
<p>该算法依然处理不了 <strong>让权等待</strong> 问题, 每个进程会一次占用处理机不断循环判断是否能够访问临界区</p>
</blockquote>
<p><img src="https://s2.loli.net/2024/05/24/nFRj5yJxuqiZA6k.png" alt="image-20240524115004368"></p>
<h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p><img src="https://s2.loli.net/2024/05/26/mYw9R4hua5XkFPy.png" alt="image-20240526112105048"></p>
<ul>
<li>利用中断, 进行开中断,关中断<ul>
<li>优点: 简单高效</li>
<li>缺点: &#x3D;&#x3D;不适用多核处理机&#x3D;&#x3D;, 不适用于用户进程, 因为 开&#x2F;关 中断只能运行在内核态, 无法让用户来执行</li>
</ul>
</li>
</ul>
<p><img src="D:%5Cstudy%5Cblog%5Cpush_blog%5Csource%5Cimg%5Cos.assets%5Cimage-20240526112047556.png" alt="image-20240526112047556"></p>
<ul>
<li><p>TestAndSet(又称TestAndSetLock, 简称 TSL)</p>
<ul>
<li>优点: 实现简单, 硬件实现</li>
<li>缺点: 不满足 “让权等待” 原则, 暂时无法访问临界资源的基础会一直占用 CPU, 循环执行 TSL 指令, 造成忙等</li>
</ul>
<blockquote>
<p>TSL指令将<strong>上锁</strong>与<strong>检查</strong>合并为了一个不可分割的<strong>原子操作</strong>, 从而避免了软件实现互斥过程中, 异步执行造成的影响</p>
</blockquote>
</li>
</ul>
<p><img src="https://s2.loli.net/2024/05/26/ahvTOkrtHB3qDSl.png" alt="image-20240526111812685"></p>
<ul>
<li>Swap 指令(又称 Exchange, 或 XCHG 指令)<ul>
<li>优点: 实现简单, 硬件实现</li>
<li>缺点: 不满足 “让权等待” 原则, 暂时无法访问临界资源的基础会一直占用 CPU, 循环执行 TSL 指令, 造成忙等</li>
</ul>
</li>
</ul>
<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><ul>
<li>互斥锁(mutex lock), 是解决临界区最简单的工具, 一个进程进入临界区时获得锁, 退出时释放锁<ul>
<li><code>acquire()</code> 获得锁</li>
<li><code>release()</code> 释放锁</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">acquire</span>()&#123;</span><br><span class="line">    <span class="keyword">while</span>(!available)&#123;&#125;;</span><br><span class="line">    available = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">release</span>()&#123;</span><br><span class="line">    available = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>acquire()</code> 与 <code>release()</code> 必须是原子操作, 因此互斥锁通常采用硬件机制实现</p>
<p>忙等期间, 时间片用完了, 进程直接下处理机, 不会持续占用 cpu 资源</p>
<p>STL, Swap, 单标志法 是自旋锁, 进程在忙等时, 不会下处理机, 而是一直占用处理机循环等待</p>
</blockquote>
<h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><ul>
<li><strong>信号量</strong>是一个变量, 表示系统中某种资源的数量</li>
<li><strong>原语</strong>: <code>wait(S)</code> 与 <code>signal(S)</code>, 括号里的 <code>信号量S</code> 就是调用函数传入的参数</li>
<li><code>wait()</code>和<code>signa()</code>常常简称为 &#x3D;&#x3D;P、V操作&#x3D;&#x3D;</li>
</ul>
<h3 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h3><ul>
<li>存在 “忙等” 现象, 不满足 “让权等待” 原则</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> S = <span class="number">1</span>;	<span class="comment">//全局资源数量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(s &lt;= <span class="number">0</span>);	<span class="comment">//若资源不足, 则循环等待(&quot;忙等&quot;)</span></span><br><span class="line">    s = s - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line">    s = s + <span class="number">1</span>;		<span class="comment">//进程结束, 释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h3><ul>
<li>遵循了 “让权等待” 原则, 不会出现 “忙等” 现象</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    <span class="type">int</span> value;			<span class="comment">//资源数量</span></span><br><span class="line">    Struct process *L; 	<span class="comment">//阻塞挂起队列</span></span><br><span class="line">&#125; semaphore;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wait</span> <span class="params">(semaphore S)</span></span>&#123;</span><br><span class="line">    S.value --;			<span class="comment">//资源减一</span></span><br><span class="line">    <span class="keyword">if</span>(S.value &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">block</span>(S.L); 	<span class="comment">//发现当前资源不足, 主动自我阻塞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">signal</span> <span class="params">(semaphore S)</span></span>&#123;</span><br><span class="line">    S.value ++;			<span class="comment">//进程结束, 释放资源</span></span><br><span class="line">    <span class="keyword">if</span>(S.value &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">wakeup</span>(S.L);	<span class="comment">//从阻塞队列中,释放队头的一个进程, 并把自己占用的资源分配给它</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>信号量机制, 可以实现复杂条件下的进程同步问题</p>
<p>&#x3D;&#x3D;其将拓扑图中的每条边,作为一个资源通过信号量来表示, <strong>前驱进程</strong>必须先释放某些资源, <strong>后继进程</strong>才能继续完成&#x3D;&#x3D;</p>
</blockquote>
<p><img src="https://s2.loli.net/2024/05/27/iBKs6vyGPDcV8bX.png" alt="image-20240527141546066"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">p1</span>() &#123;</span><br><span class="line">    s1:</span><br><span class="line">    <span class="built_in">v</span>(a); <span class="comment">// 释放a资源</span></span><br><span class="line">    <span class="built_in">v</span>(b); <span class="comment">// 释放b资源</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">p2</span>() &#123;</span><br><span class="line">    <span class="built_in">p</span>(a); <span class="comment">// 请求a资源</span></span><br><span class="line">    s2;</span><br><span class="line">    <span class="built_in">v</span>(c); <span class="comment">// 释放c资源</span></span><br><span class="line">    <span class="built_in">v</span>(d); <span class="comment">// 释放d资源 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h1><p><img src="https://s2.loli.net/2024/05/27/Rp3qSaeygNvzH7M.png" alt="image-20240527144250417"></p>
<blockquote>
<p><strong>互斥信号量</strong>: <code>mutex</code> 缓冲区需要互斥访问, 避免多个生产者进程写同一个地址</p>
<p><strong>同步信号量</strong>: </p>
<ul>
<li><code>empty</code> 表示空闲缓冲区数量</li>
<li><code>full</code> 表示非空缓冲区数量</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">producer</span> ()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">P</span>(empty);	<span class="comment">// ①</span></span><br><span class="line">        <span class="built_in">P</span>(mutex);	<span class="comment">// ②</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">V</span>(mutex);</span><br><span class="line">        <span class="built_in">V</span>(full);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">consumer</span> () &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">P</span>(full);	<span class="comment">// ③</span></span><br><span class="line">        <span class="built_in">P</span>(mutex);	<span class="comment">// ④</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">V</span>(mutex);</span><br><span class="line">        <span class="built_in">V</span>(empty);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>③ ④ 操作顺序不能改变</p>
<p>① ② 操作也不能改变</p>
<p><strong>举例</strong></p>
<p>当缓存区满了, <code>producer</code> 执行 <code>P(mutex)</code> 后获取了临界区资源, 然后 <code>P(empty)</code> 此时缓冲区无空闲, 因此主动阻塞, 时间片结束后, <code>consumer</code> 上处理机, 执行 <code>P(mutex)</code>, 发现互斥资源无空闲, 也主动阻塞. 从此两个进程陷入死循环 “<strong>死锁</strong>“</p>
</blockquote>
<h1 id="多生产者-多消费者问题"><a href="#多生产者-多消费者问题" class="headerlink" title="多生产者-多消费者问题"></a>多生产者-多消费者问题</h1><ul>
<li>问题不同点, 在于<strong>生产者</strong>产生的数据并非完全一致的, 不同生产者可能产生不同类型的数据</li>
<li><strong>消费者</strong>需要从缓存中读取的数据也不一定一致</li>
</ul>
<p><img src="https://s2.loli.net/2024/05/27/u4R9tojvNUgIG6J.png" alt="image-20240527150648120"></p>
<blockquote>
<p><strong>缓冲区大小</strong>若为 <code>1</code>, 那么有可能就无需单独设置<strong>互斥信号量</strong>, 就能实现互斥访问</p>
<p><strong>互斥信号量</strong></p>
<ul>
<li><code>mutex</code> 互斥访问 plate (缓冲区)</li>
</ul>
<p><strong>同步信号量</strong></p>
<ul>
<li><code>apple</code> 盘中有多少苹果</li>
<li><code>orange</code> 盘中有多少橘子</li>
<li><code>plate</code> 盘中还可放多少水果</li>
</ul>
<p>&#x3D;&#x3D;对于同步信号量,需要关注于事件的发生先后,而不必聚焦于某些进程的先后逻辑&#x3D;&#x3D;</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dad</span>()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">// 准备苹果</span></span><br><span class="line">        <span class="built_in">P</span>(plate);</span><br><span class="line">        <span class="built_in">P</span>(mutex);</span><br><span class="line">        <span class="comment">// 苹果放入缓冲区</span></span><br><span class="line">        <span class="built_in">V</span>(mutex);</span><br><span class="line">        <span class="built_in">V</span>(plate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">mom</span>()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">// 准备橘子</span></span><br><span class="line">        <span class="built_in">P</span>(plate);</span><br><span class="line">        <span class="built_in">P</span>(mutex);</span><br><span class="line">        <span class="comment">// 橘子放入缓冲区</span></span><br><span class="line">        <span class="built_in">V</span>(mutex);</span><br><span class="line">        <span class="built_in">V</span>(plate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">daughter</span>()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">P</span>(plate);</span><br><span class="line">        <span class="built_in">P</span>(mutex);</span><br><span class="line">        <span class="comment">// 从缓冲区拿走苹果</span></span><br><span class="line">        <span class="built_in">V</span>(mutex);</span><br><span class="line">        <span class="built_in">V</span>(plate);</span><br><span class="line">        <span class="comment">// 吃掉苹果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">son</span>()&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="built_in">P</span>(plate);</span><br><span class="line">        <span class="built_in">P</span>(mutex);</span><br><span class="line">        <span class="comment">// 从缓冲区拿走橘子</span></span><br><span class="line">        <span class="built_in">V</span>(mutex);</span><br><span class="line">        <span class="built_in">V</span>(plate);</span><br><span class="line">        <span class="comment">// 吃掉橘子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="吸烟者问题"><a href="#吸烟者问题" class="headerlink" title="吸烟者问题"></a>吸烟者问题</h1><p><img src="https://s2.loli.net/2024/05/27/XPAusgzGWLatd8R.png" alt="image-20240527161029324"></p>
<p><img src="https://s2.loli.net/2024/05/27/3aFpJCrqRm4Nzgd.png" alt="image-20240527161802260"></p>
<blockquote>
<p><strong>互斥信号量:</strong> </p>
<p>+ </p>
<p><strong>同步信号量</strong>: </p>
<ul>
<li><code>offer1</code> 表示组合一</li>
<li><code>offer2</code> 表示组合二</li>
<li><code>offer3</code> 表示组合三</li>
<li><code>finish</code> 表示吸烟是否完成</li>
</ul>
</blockquote>
<h1 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h1><ul>
<li><strong>两类进程</strong><ul>
<li>读进程</li>
<li>写进程</li>
</ul>
</li>
<li><strong>互斥关系</strong><ul>
<li>写进程 - 读进程</li>
<li>写进程 - 写进程</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>互斥信号量</strong></p>
<ul>
<li><code>rw</code> 用于实现共享文件的互斥访问</li>
<li><code>mutex</code> 用于保证对 <code>count</code> 变量的互斥访问</li>
<li><code>w</code> 用于实现<strong>写进程优先</strong></li>
</ul>
<p><strong>同步信号量</strong></p>
<ul>
<li><code>count</code> 用于记录当前有多少个进程在访问文件</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">writer</span>() &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">P</span>(w);</span><br><span class="line">        <span class="built_in">P</span>(rw);</span><br><span class="line">        <span class="comment">// 写文件</span></span><br><span class="line">        <span class="built_in">V</span>(rw);</span><br><span class="line">        <span class="built_in">V</span>(w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reader</span>() &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">P</span>(w);</span><br><span class="line">        <span class="built_in">P</span>(mutex);</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">P</span>(rw);</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">V</span>(mutex);</span><br><span class="line">        <span class="built_in">V</span>(w);</span><br><span class="line">        <span class="comment">// 读文件</span></span><br><span class="line">        <span class="built_in">P</span>(mutex);</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span>(!count)</span><br><span class="line">            <span class="built_in">V</span>(rw);</span><br><span class="line">        <span class="built_in">V</span>(mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="哲学家问题"><a href="#哲学家问题" class="headerlink" title="哲学家问题"></a>哲学家问题</h1>]]></content>
      <categories>
        <category>408</category>
      </categories>
      <tags>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot开发</title>
    <url>/2024/04/13/d3394559.html</url>
    <content><![CDATA[<h1 id="Web-入门"><a href="#Web-入门" class="headerlink" title="Web 入门"></a>Web 入门</h1><ul>
<li><p>Spring Boot 将传统 Web 开发的 MVC, JSON, Tomcat 等框架整合, 提供了 spring-boot-starter-web 组件, 简化了 Web 应用的配置</p>
</li>
<li><p>创建 SpringBoot 项目 勾选 Spring Web 选项后, 会自动将 spring-boot-starter-web 组件加入到项目中</p>
</li>
<li><p>webmvc 是 Web 开发的基础框架, json 为 JSON 数据解析组件, tomcat 为自带容器依赖</p>
</li>
<li><p><code>Spring Boot</code> 提供了 <code>@Controller</code> 和 <code>@RestController</code> 两种注解</p>
<ol>
<li><code>@Controller</code> 返回页面和数据</li>
<li><code>@RestController</code> 返回数据, 自动将返回值转换为 JSON 格式返回</li>
</ol>
</li>
</ul>
<h2 id="URL-映射"><a href="#URL-映射" class="headerlink" title="URL 映射"></a>URL 映射</h2><ul>
<li><code>@RequestMapping</code> 注解主要负责 URL 的路由映射, 可以添加在 <code>Controller</code> 类或者具体方法上<ol>
<li>若添加在 <code>Controller</code> 类上, 则这个 <code>Controller</code> 中的所有路由映射都将加上此映射规则</li>
<li>若添加在方法上, 则只对当前方法有效</li>
</ol>
</li>
<li>参数<ul>
<li><code>value</code>: 请求 URL 的路径, 支持 URL 模板、正则表达式</li>
<li><code>method</code>: HTTP 请求方法</li>
<li><code>consumes</code>: 请求的媒体类型(Content-Type), 如 <code>application/json</code></li>
<li><code>produces</code>: 响应的媒体类型</li>
<li><code>params</code>: 请求参数</li>
<li><code>headers</code>: 请求头的值</li>
</ul>
</li>
</ul>
<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ul>
<li><code>@RequestParam</code> 可以将请求参数绑定到控制器的方法参数上, 介绍的参数来着 HTTP 请求体或请求 URL 的QueryString, 当请求的参数名称与 Controller 的业务方法参数名称一致时, <code>@RequestParam</code> 可省略</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若使用了 @RequestParam 注解则请求中必须携带该参数</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">(<span class="meta">@RequestParam(&quot;nikename&quot;)</span> String name)</span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><code>@PathVaraible</code> 用于处理动态的 URL, URL 的值可作为控制器中处理方法的参数</li>
<li><code>@RequestBody</code> 接受的参数是来着 requestBody (请求体), 一般是用于处理非 <code>Content-Type: application/x-www-form-urlencoded</code> 编码格式的数据, 例如<code>application/json</code>, <code>application/xml</code></li>
</ul>
]]></content>
      <categories>
        <category>front_end</category>
      </categories>
      <tags>
        <tag>springBoot</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo</title>
    <url>/2024/03/07/ab21860c.html</url>
    <content><![CDATA[<h1 id="关于配置文件"><a href="#关于配置文件" class="headerlink" title="关于配置文件"></a>关于配置文件</h1><p>在 <code>hexo</code> 的根目录创建一个文件 <code>_config.butterfly.yml</code>，并把主题目录的 <code>_config.yml </code>内容复制到<code> _config.butterfly.yml</code> 中。( 注意: 复制的是主題的 <code>_config.yml</code> ，而不是 <code>hexo</code> 的 <code>_config.yml</code>)</p>
<blockquote>
<p><strong>注意</strong>： 不能把主題目录的 <code>_config.yml </code>删掉</p>
</blockquote>
<p>注意： 以后只需要在 <code>_config.butterfly.yml</code> 进行配置就行。<br>如果使用了 <code>_config.butterfly.yml</code>， 配置主题的 <code>_config.yml</code> 将不会有效果。</p>
<p><code>Hexo</code>会自动合并主题中的 <code>_config.yml</code> 和 <code>_config.butterfly.yml</code> 里的配置，如果存在同名配置，会使用 <code>_config.butterfly.yml</code> 的配置，其优先度较高。</p>
<h1 id="博客撰写步骤"><a href="#博客撰写步骤" class="headerlink" title="博客撰写步骤"></a>博客撰写步骤</h1><p><strong>第一步</strong>: 创建 <code>.md</code> 文件</p>
<ul>
<li><p>方法一: <code>cd</code> 进入 <code>hexo</code> 根目录, 在 <code>Git Bash Here</code> 中执行命令: <code>hexo new &#39;blog-name&#39;</code> , 此时 <code>hexo</code> 会在 <code>\source\_posts</code> 下生成名为 <code>blog-name</code> 的 <code>.md</code> 文件, 用这个命令可以自动生成文件, 其中包含默认内容如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">blog-name</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">创建时间</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line">	<span class="bullet">-</span> <span class="string">tag1</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">tag2</span> <span class="comment"># 一定注意空格</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">description</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">封面地址</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">个性化顶部图</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二: 也可以手动创建 <code>.md</code> 文件</p>
</li>
</ul>
<p><strong>第二步</strong>: 编写 <code>md</code> 文档内容并保存</p>
<ul>
<li>使用 <code>markdown</code> 语法, 撰写博客内容即可</li>
</ul>
<p><strong>第三步</strong>: 清理然后生成, 然后推送到远端仓库</p>
<ul>
<li><p><code>hexo</code> 根目录下进入 <code>bash</code> 终端, 依次输入以下命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="优化博客链接配置"><a href="#优化博客链接配置" class="headerlink" title="优化博客链接配置"></a>优化博客链接配置</h1><p><code>Hexo</code> 文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。</p>
<p>这样一来, 当我们修改了文章的日期或者标题, 链接很可能就失效了, 特别是文章标题包含中文时, 被转译为 URL 编码后, 链接就特别长😣😣😣</p>
<p><strong>解决方案</strong></p>
<ul>
<li><p>安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>_config.yml</code> 配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:abbrlink.html</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="个性化blog图片"><a href="#个性化blog图片" class="headerlink" title="个性化blog图片"></a>个性化blog图片</h1><ul>
<li>修改主题路径下的 <code>_config.yml</code> 配置文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># the position of cover in home page (封面顯示的位置)</span></span><br><span class="line">  <span class="comment"># left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">  <span class="comment"># When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">    <span class="comment"># - https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>index_enable</td>
<td>主页是否显示文章封面</td>
</tr>
<tr>
<td>aside_enable</td>
<td>侧栏是否显示</td>
</tr>
<tr>
<td>archives_enable</td>
<td>归档页面是否显示文章封面</td>
</tr>
<tr>
<td>position</td>
<td>主页卡片文章封面显示位置<br />- left：全部显示左边<br />- right：全部显示右边<br />- both：左右交替</td>
</tr>
<tr>
<td>default_cover</td>
<td>默认的图片配置</td>
</tr>
</tbody></table>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://jsd.012700.xyz/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://jsd.012700.xyz/gh/jerryc127/CDN@latest/cover/default_bg2.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://jsd.012700.xyz/gh/jerryc127/CDN@latest/cover/default_bg3.png</span></span><br></pre></td></tr></table></figure>



<h1 id="待办"><a href="#待办" class="headerlink" title="待办"></a>待办</h1><ul>
<li>检索功能</li>
<li>评论功能</li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习</title>
    <url>/2024/03/24/317b894e.html</url>
    <content><![CDATA[<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1>]]></content>
      <categories>
        <category>front_end</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo远端部署</title>
    <url>/2024/03/15/f1705634.html</url>
    <content><![CDATA[<h1 id="创建hexo项目"><a href="#创建hexo项目" class="headerlink" title="创建hexo项目"></a>创建hexo项目</h1><p><img src="https://s2.loli.net/2024/03/16/ZcelUIzSBPvW4XO.png" alt="image-20240315212549119"></p>
<p><code>test</code> 就是准备好用来初始化 <code>hexo</code> 项目的根目录</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><p>进入 <code>test</code> 执行 <code>hexo init</code> </p>
<p>不出意外的话, <code>test</code> 路径下会出现以下内容</p>
</li>
</ol>
<p><img src="https://s2.loli.net/2024/03/16/tFHRKZfAL4nEhxb.png" alt="image-20240315213900716"></p>
<p>​		这就是一个初始的 <strong>hexo</strong> 项目了</p>
<ol start="2">
<li><p>进入 <code>test</code> 执行 <code>git init</code></p>
<p>将 <code>test</code> 路径初始化为一个 <code>git</code> 项目, 目的是方便后续的远端同步</p>
</li>
</ol>
<h1 id="安装theme"><a href="#安装theme" class="headerlink" title="安装theme"></a>安装theme</h1><p><a href="https://butterfly.js.org/posts/21cfbf15/">关于 <code>butterfly</code> 主题的官方安装教程</a></p>
<p>进入 <code>test\themes</code> 路径下执行 <code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git</code></p>
<blockquote>
<p> 此时会将主题项目从 github 上克隆下来</p>
</blockquote>
<p>成功后, <code>test\themes</code> 内容如下</p>
<p><img src="https://s2.loli.net/2024/03/16/UxJQ9es7KWZ4bFI.png" alt="image-20240315214900875"></p>
<p>关于如何个性化配置主题, 这里不做记录</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li><code>test</code> 根目录下, <code>.config.yml</code> 中 <code>themes</code> 参数需要配置为 <code>test\themes</code> 路径下, 你的主题所在的文件名这里就是 <code>hexo-theme-butterfly</code></li>
</ul>
<p><img src="https://s2.loli.net/2024/03/16/cwaXDnPtFezoxEr.png" alt="image-20240315214958424"></p>
<ul>
<li><code>butterfly</code> 需要单独的解析 <code>.pug</code> 的插件, 在 <code>test</code> 下执行 <code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code></li>
</ul>
<h1 id="配置deploy插件"><a href="#配置deploy插件" class="headerlink" title="配置deploy插件"></a>配置deploy插件</h1><p><a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">hexo-deployer-git  官方教程</a></p>
<p>回到 <code>test</code> 根目录, 进入 <code>git bash</code> 执行 <code>npm install hexo-deployer-git --save</code></p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol>
<li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改 <code>.config.yml</code> 配置</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>repo</code></td>
<td align="left">库（Repository）地址</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>branch</code></td>
<td align="left">分支名称</td>
<td align="left"><code>gh-pages</code> (GitHub) <code>coding-pages</code> (Coding.net) <code>master</code> (others)</td>
</tr>
<tr>
<td align="left"><code>message</code></td>
<td align="left">自定义提交信息</td>
<td align="left"><code>Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code>)</td>
</tr>
<tr>
<td align="left"><code>token</code></td>
<td align="left">可选的令牌值，用于认证 repo。用 <code>$</code> 作为前缀从而从环境变量中读取令牌</td>
<td align="left"></td>
</tr>
</tbody></table>
<h1 id="同步远端仓库"><a href="#同步远端仓库" class="headerlink" title="同步远端仓库"></a>同步远端仓库</h1><ol>
<li><p>修改 <code>.config.yml</code> 配置</p>
<ul>
<li>需要在 <strong>github</strong> 上创建名为 <code>test.github.io</code>, 这是专门用来推送 <code>hexo g</code> 生成的静态网页</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:qwqcoder/test.github.io.git</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个 <strong>git</strong> 仓库 <code>test_push.git</code>, 用于推送整个 <code>hexo</code> 项目(也就是 <code>test</code> 路径的所有内容)</p>
<p><strong>步骤</strong>:</p>
<ul>
<li><code>git add .</code></li>
<li><code>git add remote test https://github.com/qwqcoder/test_push.git</code></li>
<li><code>git push -u test master</code></li>
</ul>
<p><img src="https://s2.loli.net/2024/03/16/NJl9xBYPC3G6ph4.png" alt="image-20240315221448604"></p>
</li>
<li><p><strong>action</strong> 自动话部署</p>
<ul>
<li>给 <code>test_push.git</code> 添加一个工作流配置文件</li>
</ul>
</li>
</ol>
<ul>
<li><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">参考教程</a></li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span> </span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">qwqcoder</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="number">1958448979</span><span class="string">@qq.com</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">qwqcoder/blog_theme</span> <span class="comment"># blog_theme 是我用来专门存放主题项目的仓库</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">qwqcoder/test.github.io</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">16.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 将当前所在repository拉取到github的虚拟机容器工作目录下</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 因为hexo使用的theme主题是一个单独的git仓库项目, 给blog_push仓库push更新时会忽略其中嵌套的repo仓库</span></span><br><span class="line">    <span class="comment"># 所以事实上blog_push.git中是没有theme相关文件的, 需要额外的拉取, 同理放入容器的工作目录下</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/hexo-theme-butterfly</span> <span class="comment"># 这里指定了拉取之后存放的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装node.js, 配置node环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          # 避免访问github出现问题, 添加到known_hosts</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          ssh-keyscan 121.36.61.23 &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string">          # cp _config.butterfly.yml themes/hexo-theme-butterfly/_config.yml</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm run build</span></span><br><span class="line"><span class="string">          npm run deploy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 推送到远端服务器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rsync</span> <span class="string">deployments</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">burnett01/rsync-deployments@4.1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 这里是 rsync 的参数 switches: -avzh --delete --exclude=&quot;&quot; --include=&quot;&quot; --filter=&quot;&quot;</span></span><br><span class="line">          <span class="attr">switches:</span> <span class="string">-avzh</span> <span class="string">--delete</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git/</span>  <span class="comment"># action容器工作目录内的路径地址</span></span><br><span class="line">          <span class="attr">remote_path:</span> <span class="string">/var/www/myblog</span> <span class="comment"># 远端服务器的路径地址</span></span><br><span class="line">          <span class="attr">remote_host:</span> <span class="number">121.36</span><span class="number">.61</span><span class="number">.23</span> <span class="comment"># 服务器 ip</span></span><br><span class="line">          <span class="attr">remote_port:</span> <span class="number">22</span></span><br><span class="line">          <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">          <span class="attr">remote_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span> <span class="comment"># 一定配置密钥登录</span></span><br></pre></td></tr></table></figure>

<p>这段代码是一个 GitHub Actions 工作流程，主要用于配置环境并设置相关参数，包括：</p>
<ul>
<li><p><strong>使用 Node.js 版本：</strong></p>
<ul>
<li>使用 <code>actions/setup-node</code> 动作来设置 Node.js 环境。</li>
<li><code>$&#123;&#123; matrix.node_version &#125;&#125;</code> 是一个矩阵构建中定义的变量，用于指定要使用的 Node.js 版本。</li>
</ul>
</li>
<li><p><strong>配置环境变量：</strong></p>
<ul>
<li>使用 <code>env</code> 关键字设置环境变量。</li>
<li><code>HEXO_DEPLOY_PRI</code> 是一个环境变量，其值来自 GitHub Secrets 中的 <code>HEXO_DEPLOY_PRI</code> 密钥。</li>
</ul>
</li>
<li><p><strong>运行命令：</strong></p>
<ul>
<li>使用 <code>run</code> 关键字执行一系列命令。</li>
<li><code>sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</code> 设置系统时区为亚洲&#x2F;上海时区。</li>
<li><code>mkdir -p ~/.ssh/</code> 创建 SSH 目录，用于存放 SSH 密钥和相关文件。</li>
<li><code>echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</code> 将名为 <code>HEXO_DEPLOY_PRI</code> 的密钥内容写入 <code>~/.ssh/id_rsa</code> 文件中。</li>
<li><code>chmod 600 ~/.ssh/id_rsa</code> 修改 <code>~/.ssh/id_rsa</code> 文件的权限，确保只有当前用户可以读写该文件。</li>
<li><code>ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</code> 和 <code>ssh-keyscan 121.36.61.23 &gt;&gt; ~/.ssh/known_hosts</code> 用于将远程主机的公钥添加到 <code>~/.ssh/known_hosts</code> 文件中，以避免 SSH 连接时的警告或确认提示。</li>
<li><code>git config --global user.name $GIT_USER</code> 和 <code>git config --global user.email $GIT_EMAIL</code> 用于设置全局 Git 用户名和邮箱。</li>
</ul>
</li>
<li><p><strong>注意事项</strong></p>
<ul>
<li><p>确保在服务器上生成一个密钥对, 将<strong>公钥</strong>添加到 <code>github SSH</code> 文件中, <strong>私钥</strong>添加到 <code>test\test_push.git</code> 仓库的 <code>secret</code> 变量中, 这里将<strong>私钥</strong>命名为 <code>SSH_PRIVATE_KEY</code></p>
<p><img src="https://s2.loli.net/2024/03/16/mQD6MLj2Bpw8iPK.png" alt="image-20240316004003064"></p>
<p><img src="https://s2.loli.net/2024/03/16/AjdU4yEZopSkvIc.png" alt="image-20240316092137214"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>nginx</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>多路归并</title>
    <url>/2024/03/18/d14b420f.html</url>
    <content><![CDATA[<ul>
<li><a href="https://www.acwing.com/problem/content/4659/">例题1, 技能升级</a></li>
</ul>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><strong>多路合并 + 二分</strong></p>
<blockquote>
<p>多路等差数列:<br>10 5<br>9 7 5 3 1<br>8 7 6 5 4 3 2 1</p>
<p>从多个数列(这里是等差数列)中, 找到前 <code>m</code> 大的数, 求和输出答案</p>
<p>运用二分, 枚举 <code>mid</code>, 并用 <code>check(int mid)</code> 函数判断, 具体过程如下, 对于每个等差数列, 根据 <code>mid</code> 判断其有多少个项大于 <code>mid</code>, 累计数量到 <code>cnt</code>, 循环完成 <code>n</code> 个等差数列后, 判断 <code>cnt &gt;= m</code>,<br>最后使用 <code>ans</code> 累计这些前 <code>m</code> 大的数的和, 注意这里的等差数列中可能包含多个等于 <code>mid</code> 的项, 多出来的数量为 <code>cnt − m</code> 个</p>
<p><code>ans − (cnt − m) ∗ l</code> 即是最终答案</p>
</blockquote>
<p>😥😥😥, 猪脑过载, </p>
<ul>
<li><a href="https://www.acwing.com/problem/content/description/58/">例题2</a></li>
</ul>
<h1 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h1><p><strong>多路合并</strong></p>
<blockquote>
<p>创建两个队列, 分别存放包含 2, 3, 5这些质因子的数</p>
<p>一开始, <code>a</code> 队列只有 2 一个数, <code>b</code> 队列只有 3 一个数, <code>c</code> 队列只有 5 一个数</p>
<p>操作步骤为, 每次从 <code>a, b, c</code> 三个队列中取出队头最小的那个数记为 <code>curr</code>, 同时将 <code>curr * 2</code> 放入 <code>a</code> 队列, <code>curr * 3</code> 放入 <code>b</code> 队列, <code>curr * 5</code> 放入 <code>c</code> 队列. 这样子每个</p>
</blockquote>
<ul>
<li><a href="https://www.acwing.com/problem/content/description/1380/">例题3</a></li>
</ul>
<p><strong>多路合并</strong></p>
<p><strong>定义</strong>: 丑数是一组质数集合 $S$ 中若干个质数(可重复)的乘积, </p>
<p><strong>题意</strong>: 从给定包含 $k$ 个不同质数的集合 $S &#x3D; {p_1, p_2,…,p_k}$ 中找到从小到大的第 $K$ 大的丑数</p>
<h1 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h1><blockquote>
<p>一个显然的性质是，任意一个丑数都可以由另一个比他小的丑数乘以一个质数因子得到。</p>
<p>那么构造一个数组 <code>f</code> 用来从小到大更新丑数，<code>f[0]=1</code> 特判, 对于下一个丑数的更新, 构造如下:</p>
<p>对于每一个质因子<code>a[j]</code>, 我们用已经构造出的前 <code>i</code> 个丑数依次与 <code>a[j]</code> 做乘法, 从而构造出一个新的丑数,  对于每个质数 <code>a[j]</code>, 分别找到丑数 <code>a[j] * f[idx]</code>(满足 <code>a[j]*f[idx]</code> 刚好大于 <code>f[i-1]</code> 即可), 并找到最小的那个丑数作为 <code>f[i]</code>。往后的更新就用不着 <code>idx</code> 之前的丑数了，所以用个 <code>b</code> 数组记录第 <code>i</code> 个质数枚举 <code>f[i]</code> 的下标位置</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> k,n;</span><br><span class="line"><span class="type">int</span> a[N],f[N],b[N];</span><br><span class="line"><span class="comment">// a 数组用于存放给定的质数集合，f 数组从小到大记录丑数</span></span><br><span class="line"><span class="comment">// b 数组记录第 i 个质因子的枚举位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;i++)  cin &gt;&gt; a[i];</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">        <span class="type">int</span> minx = <span class="number">2e9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= k;j++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (a[j]*f[b[j]] &lt;= f[i<span class="number">-1</span>]) b[j]++;</span><br><span class="line">            minx = <span class="built_in">min</span> (minx,a[j]*f[b[j]]);</span><br><span class="line">        &#125;</span><br><span class="line">        f[i] = minx;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>多路归并</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展欧几里得</title>
    <url>/2024/04/12/b92b47a1.html</url>
    <content><![CDATA[<p><img src="D:%5Cstudy%5Cblog%5Cpush_blog%5Csource%5Cimg%5C%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97.assets%5Cimage-20240412165958099.png" alt="image-20240412165958099"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span>&amp; y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x1, y1, d;</span><br><span class="line">    d = <span class="built_in">exgcd</span>(b, a % b, x1, y1);</span><br><span class="line">    x = y1, y = x1 - a/b * y1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法学习 数论</category>
      </categories>
      <tags>
        <tag>扩展欧几里得</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2024/03/17/735e5788.html</url>
    <content><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N], tmp[N], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    cnt += <span class="built_in">merge</span>(a, l, mid);</span><br><span class="line">    cnt += cnt + <span class="built_in">merge</span>(a, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = l, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt;= a[j]) tmp[k++] = a[i ++];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cnt += mid - i + <span class="number">1</span>;</span><br><span class="line">            tmp[k++] = a[j ++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k++] = a[i ++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k++] = a[j ++];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">        a[l + i] = tmp[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">merge</span>(a, <span class="number">1</span>, n);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结论：逆序对的数量 $&#x3D;$ 使得数组升序时相邻数组元素的最小交换次数,</li>
</ul>
<p><strong>证明：</strong></p>
<blockquote>
<p>交换数组两个相邻的元素 <code>a[i]</code>, <code>a[i + 1]</code>, 若二者不相等, 那么对数组的逆序对数量的影响为 1, <code>a[i] &gt; a[i + 1]</code> 时逆序对数目减一, 又因为升序数组的逆序对数目为 0, 可知至少交换 k 次相邻元素可使得数组变成升序</p>
<p>又因为数组不为升序时, 必定存在 <code>a[i] &gt; a[i + 1]</code>, 否则数组就是升序了🤪</p>
<p>显然, 每次交换都可以找到一个位置存在 <code>a[i] &gt; a[i + 1]</code>, 从而逆序对数目减一, 所以结论成立</p>
</blockquote>
<h2 id="树状数组求逆序对"><a href="#树状数组求逆序对" class="headerlink" title="树状数组求逆序对"></a>树状数组求逆序对</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>merge sort</tag>
      </tags>
  </entry>
  <entry>
    <title>树相关算法</title>
    <url>/2024/03/19/59a207d0.html</url>
    <content><![CDATA[<h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><h2 id="根据中后序遍历构造先序遍历"><a href="#根据中后序遍历构造先序遍历" class="headerlink" title="根据中后序遍历构造先序遍历"></a>根据中后序遍历构造先序遍历</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">char</span> data;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> * lchild, rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> * <span class="built_in">build</span>(<span class="type">char</span> *post,<span class="type">char</span> *in,<span class="type">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">    node *b;</span><br><span class="line">    <span class="type">char</span> r,*p;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">if</span>(le n&lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    r = *(post + len - <span class="number">1</span>); <span class="comment">// 从后序遍历中最后一项直接得到根节点</span></span><br><span class="line">    b=(node *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(node));</span><br><span class="line">    b-&gt;data = r;</span><br><span class="line">    <span class="keyword">for</span>(p = in;p &lt; in + len;p ++) <span class="comment">// 在中序遍历中找到根节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*p == r)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    k = p - in; <span class="comment">//计算左子树的包含节点个数</span></span><br><span class="line">    b-&gt;lchild = <span class="built_in">build</span>(post,in,k);</span><br><span class="line">    b-&gt;rchild = <span class="built_in">build</span>(post + k, p + <span class="number">1</span>, len - k - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>tree algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>离散化算法</title>
    <url>/2024/03/17/5edaa3b.html</url>
    <content><![CDATA[<h1 id="一种很新的离散化"><a href="#一种很新的离散化" class="headerlink" title="一种很新的离散化"></a>一种很新的离散化</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">discrete</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) p[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(p.<span class="built_in">begin</span>() + <span class="number">1</span>, p.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> x, <span class="type">int</span> y)&#123;</span><br><span class="line">        <span class="keyword">return</span> a[x] &lt; a[y];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        a[p[i]] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>sort</code> 得到的 <code>p</code> 数组, 其中 <code>p[i]</code> 代表 <code>a</code> 数组中第 <code>i</code> 小的元素的下标</li>
<li>根据 <code>p</code> 数组, 再用一个 for 循环, 将 <code>a</code> 数组离散化为 $1 \to n$</li>
</ul>
]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>背包专题</title>
    <url>/2024/03/15/4f2ce235.html</url>
    <content><![CDATA[<h1 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h1><p>&#x3D;&#x3D;从后往前更新&#x3D;&#x3D;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i  = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;    </span><br><span class="line">    cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= v[i]; j++)</span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h1><p>&#x3D;&#x3D;从前往后更新&#x3D;&#x3D;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i  = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;    </span><br><span class="line">    cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = v[i]; j &lt;= m; j++)</span><br><span class="line">        dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + w[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h1><p>&#x3D;&#x3D;分别使用01和多重背包&#x3D;&#x3D;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50000</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class="line">        <span class="comment">//如果所有当前项的花费超过总的背包体积，约等于当前项无限多，完全背包处理</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] * v[i] &gt;= m) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = v[i]; j &lt;= m; j++)</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//二进制分解使用01背包处理</span></span><br><span class="line">            <span class="type">int</span> k = <span class="number">1</span>, c = s[i];</span><br><span class="line">            <span class="keyword">while</span> (k &lt;= c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= k * v[i]; j--)</span><br><span class="line">                    dp[j] = <span class="built_in">max</span>(dp[j], dp[j - k * v[i]] + w[i] * k);</span><br><span class="line">                c -= k;</span><br><span class="line">                k &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= c * v[i]; j--)</span><br><span class="line">                    dp[j] = <span class="built_in">max</span>(dp[j], dp[j - c * v[i]] + c * w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="混合背包"><a href="#混合背包" class="headerlink" title="混合背包"></a>混合背包</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1100</span>];</span><br><span class="line"><span class="type">int</span> q[<span class="number">1100</span>];</span><br><span class="line"><span class="type">int</span> hh = <span class="number">-1</span>, tt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v, w, s;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(s &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = m;j &gt;= v;j --)</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j - v] + w, dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = v;j &lt;= m;j ++)</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j - v] + w, dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> k = <span class="number">1</span>, c = s;</span><br><span class="line">            <span class="keyword">while</span> (k &lt;= c)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= k * v; j--)</span><br><span class="line">                    dp[j] = <span class="built_in">max</span>(dp[j], dp[j - k * v] + w * k);</span><br><span class="line">                c -= k;</span><br><span class="line">                k &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= c * v; j--)</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - c * v] + c * w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[m];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ 语法学习</title>
    <url>/2024/03/16/ac3a716d.html</url>
    <content><![CDATA[<h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><h2 id="一般重载"><a href="#一般重载" class="headerlink" title="一般重载"></a>一般重载</h2><p>在C++中可以通过<strong>重载</strong>运算符来改变已有运算符的行为，使其适用于自定义类型。以下是一个简单的例子，演示如何重载加法运算符（+）来实现两个自定义对象的相加：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyNumber</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyNumber</span>(<span class="type">int</span> n) : <span class="built_in">num</span>(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载加法运算符</span></span><br><span class="line">    MyNumber <span class="keyword">operator</span>+(<span class="type">const</span> MyNumber&amp; other) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MyNumber</span>(<span class="keyword">this</span>-&gt;num + other.num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数字的方法</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getNum</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyNumber <span class="title">num1</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    <span class="function">MyNumber <span class="title">num2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用重载的加法运算符</span></span><br><span class="line">    MyNumber sum = num1 + num2;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Sum: &quot;</span> &lt;&lt; sum.<span class="built_in">getNum</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>MyNumber</code> 类重载了加法运算符 <code>+</code>。在 <code>main()</code> 函数中，我们创建了两个 <code>MyNumber</code> 对象 <code>num1</code> 和 <code>num2</code>，然后使用重载的加法运算符将它们相加，并将结果赋给 <code>sum</code>。最后，我们打印出 <code>sum</code> 对象中存储的值。</p>
<p>减法运算符 <code>-</code>、乘法运算符 <code>*</code> 等类似，<strong>自增运算符比较特殊</strong>。重载运算符时需要考虑类型的合理性和操作的语义，以确保代码的可读性和正确性。</p>
<h2 id="自增运算符"><a href="#自增运算符" class="headerlink" title="自增运算符"></a>自增运算符</h2><p>C++ 中的自增运算符 <code>++</code> 的重载有一些特殊之处。在 C++ 中，自增运算符可以以前缀形式（<code>++var</code>）或后缀形式（<code>var++</code>）使用，并且可以重载这两种形式。</p>
<blockquote>
<p>重载前缀形式的自增运算符时，通常返回递增后的对象的引用（或指针）。而重载后缀形式时，则要返回递增前的对象的副本，通常通过一个额外的参数来区分前缀和后缀形式的调用。</p>
</blockquote>
<p>以下是一个简单的示例，演示了如何重载前缀和后缀形式的自增运算符：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyNumber</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyNumber</span>(<span class="type">int</span> n) : <span class="built_in">num</span>(n) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载前缀形式的自增运算符</span></span><br><span class="line">    MyNumber&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">        ++num;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载后缀形式的自增运算符</span></span><br><span class="line">    MyNumber <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;</span><br><span class="line">        MyNumber temp = *<span class="keyword">this</span>;</span><br><span class="line">        ++num;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数字的方法</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getNum</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyNumber <span class="title">num</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用前缀形式的自增运算符</span></span><br><span class="line">    ++num;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After prefix increment: &quot;</span> &lt;&lt; num.<span class="built_in">getNum</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用后缀形式的自增运算符</span></span><br><span class="line">    MyNumber num2 = num++;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;After postfix increment: &quot;</span> &lt;&lt; num2.<span class="built_in">getNum</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MyNumber</code> 类重载了前缀和后缀形式的自增运算符 <code>++</code>。在 <code>main()</code> 函数中，我们分别使用了前缀和后缀形式的自增运算符，并打印了结果。</p>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><p>初始化列表是一种用于在对象构造过程中初始化成员变量的特性。它<strong>提供了一种更加有效和灵活的初始化方式，特别是对于类中的成员变量或者继承关系中的基类构造函数。</strong></p>
<blockquote>
<p>在传统的构造函数中，成员变量的初始化通常是在构造函数的函数体中进行的。而使用初始化列表，则可以在构造函数的初始化列表中直接初始化成员变量，而不需要在构造函数的函数体中再次赋值。</p>
</blockquote>
<p>初始化列表的语法是在构造函数的参数列表后面使用冒号，并列出成员变量及其初始化值，以逗号分隔。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 使用初始化列表初始化成员变量</span></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> a, <span class="type">int</span> b) : <span class="built_in">x</span>(a), <span class="built_in">y</span>(b) &#123;</span><br><span class="line">        <span class="comment">// 构造函数的函数体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，构造函数 <code>MyClass(int a, int b)</code> 使用了初始化列表来初始化成员变量 <code>x</code> 和 <code>y</code>。</p>
<p><strong>优点</strong></p>
<ol>
<li><strong>效率更高：</strong> 使用初始化列表直接在对象构造时初始化成员变量，避免了先构造对象再赋值的过程，提高了效率。</li>
<li><strong>const 成员变量和引用类型成员变量必须使用初始化列表：</strong> 在初始化列表中初始化 const 成员变量和引用类型成员变量是唯一可行的方式。</li>
<li><strong>初始化顺序：</strong> 成员变量在初始化列表中的顺序决定了初始化的顺序，与它们在类中声明的顺序无关。这有助于避免一些潜在的问题。</li>
</ol>
<p>总之，C++ 的初始化列表是一种强大的特性，可以帮助你更优雅地初始化类的成员变量，并提高代码的效率和可读性。</p>
<h2 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>当你没有显式地定义拷贝构造函数时，编译器会自动生成一个默认的拷贝构造函数。让我们通过一个简单的示例来演示这一点：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span>* ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> val) : <span class="built_in">x</span>(val), <span class="built_in">ptr</span>(<span class="keyword">new</span> <span class="built_in">int</span>(val)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员函数，打印对象的值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;x: &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, ptr: &quot;</span> &lt;&lt; *ptr &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个对象并打印其值</span></span><br><span class="line">    <span class="function">MyClass <span class="title">obj1</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    obj1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过另一个对象初始化一个新对象，并打印其值</span></span><br><span class="line">    MyClass obj2 = obj1;</span><br><span class="line">    obj2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例中，<code>MyClass</code> 类有两个成员变量：一个是整型 <code>x</code>，另一个是指向整型的指	针 <code>ptr</code>。在构造函数中，我们分别为 <code>x</code> 和 <code>ptr</code> 分配了内存。</p>
<p>即使我们没有显式地定义拷贝构造函数，编译器会自动生成一个默认的拷贝构造函数，它会逐个成员地复制值。在这个示例中，<code>ptr</code> 成员是一个指针，编译器会复制指针的值，使得 <code>obj1</code> 和 <code>obj2</code> 的 <code>ptr</code> 指向相同的内存地址，&#x3D;&#x3D;这可能会导致浅拷贝问题。&#x3D;&#x3D;</p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><blockquote>
<p>要解决浅拷贝问题，需要实现一个自定义的拷贝构造函数，以确保对象之间的深度拷贝。在拷贝构造函数中，你需要手动分配新的内存空间，并将原始对象的数据复制到新分配的内存中，而不是简单地复制指针。</p>
</blockquote>
<p>修改浅拷贝的示例，并添加一个自定义的拷贝构造函数来解决浅拷贝问题：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span>* ptr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> val) : <span class="built_in">x</span>(val), <span class="built_in">ptr</span>(<span class="keyword">new</span> <span class="built_in">int</span>(val)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义拷贝构造函数</span></span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">const</span> MyClass&amp; other) : <span class="built_in">x</span>(other.x), <span class="built_in">ptr</span>(<span class="keyword">new</span> <span class="built_in">int</span>(*other.ptr)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">MyClass</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span> ptr; <span class="comment">// 释放指针指向的内存</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员函数，打印对象的值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;x: &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, ptr: &quot;</span> &lt;&lt; *ptr &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个对象并打印其值</span></span><br><span class="line">    <span class="function">MyClass <span class="title">obj1</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">    obj1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过另一个对象初始化一个新对象，并打印其值</span></span><br><span class="line">    MyClass obj2 = obj1;</span><br><span class="line">    obj2.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们添加了一个自定义的拷贝构造函数 <code>MyClass(const MyClass&amp; other)</code>。在这个函数中，我们手动分配了新的内存空间，并将 <code>other</code> 对象的数据复制到新分配的内存中。这样做就确保了 <code>obj1</code> 和 <code>obj2</code> 的 <code>ptr</code> 指向的是不同的内存地址，从而避免了浅拷贝问题。</p>
<p><strong>注意</strong></p>
<p>在自定义拷贝构造函数中，我们进行了深度拷贝，复制了 <code>ptr</code> 指向的数据。并且在<strong>析构函数</strong>中，我们释放了 <code>ptr</code> 指向的内存。这样做可以确保资源的正确管理，避免内存泄漏。</p>
]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2024/04/12/d73c0d37.html</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="let-变量"><a href="#let-变量" class="headerlink" title="let 变量"></a>let 变量</h2><ol>
<li><p>不能重复声明</p>
</li>
<li><p>块级作用域</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(v &gt; <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> book = <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不存在变量提升</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book);</span><br><span class="line"><span class="keyword">var</span> book;  <span class="comment">// var 变量会被浏览器先全部收集, 可在定义语句之前使用</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>不影响作用域链</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> school = <span class="string">&#x27;jxust&#x27;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span> ()&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(school); <span class="comment">// 当前块作用域无 school 变量, 前往上级寻找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">f</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="const-变量"><a href="#const-变量" class="headerlink" title="const 变量"></a>const 变量</h2><ol>
<li><p>必须赋初值</p>
</li>
<li><p>格式: <code>const SCHOOL = &quot;jxust&quot;</code>, 一般命名全大写</p>
</li>
<li><p>无法修改, 修改会报错</p>
</li>
<li><p>块级作用域</p>
</li>
<li><p>对于数组和对象的元素修改, 不算对常量的修改, 不报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Mark&#x27;</span>];</span><br><span class="line"><span class="variable constant_">TEAM</span>.<span class="title function_">push</span>(<span class="string">&#x27;wx&#x27;</span>); <span class="comment">// TEAM 存储的是数组的地址, 不改变地址不算修改 TEAM</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;wx&#x27;</span>,</span><br><span class="line">    age = <span class="number">21</span>,</span><br><span class="line">    <span class="attr">behaviour</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;behaviour&#125; = student;</span><br><span class="line"><span class="title function_">behaviour</span>(); <span class="comment">// 省却了student.behaviour();中的对象名称</span></span><br></pre></td></tr></table></figure>

<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><ol>
<li>字符串中可出现换行符</li>
<li>支持拼接字符串</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用反引号``, 其中可出现换行符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">			&lt;li&gt; 213 &lt;/li&gt;</span></span><br><span class="line"><span class="string">			&lt;li&gt; 213 &lt;/li&gt;</span></span><br><span class="line"><span class="string">			&lt;/ul&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串拼接</span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;qwqcoder&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">`<span class="subst">$&#123;str1&#125;</span>爱吃烤肉`</span>;</span><br></pre></td></tr></table></figure>

<h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;qwqcoder&#x27;</span></span><br><span class="line"><span class="keyword">let</span> eat = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;eat meat&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">    name,  <span class="comment">// 本来是name: name,</span></span><br><span class="line">    eat,	<span class="comment">// 本来是 eat: eat,</span></span><br><span class="line">    <span class="title function_">study</span>(<span class="params"></span>)&#123; <span class="comment">//本来是 study: function()&#123;...&#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;consitently study&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ol>
<li><code>this</code> 值是静态的, 始终指向函数声明时所在作用域的 <code>this</code></li>
<li>不能作为构造函数实例化对象</li>
<li>不能使用 <code>arguments</code> 变量</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常规函数声明</span></span><br><span class="line"><span class="keyword">let</span> fn1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn1, 一般函数声明&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn2</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">fn2</span>(<span class="number">1</span>, <span class="number">13</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------</span></span><br><span class="line"><span class="comment">// 箭头函数的 this 是静态的, 固定指向函数声明时所在作用域的 this</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getName2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;qwqcoder&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jxust&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// window 下直接调用</span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">// 输出 qwqcoder</span></span><br><span class="line"><span class="title function_">getName2</span>(); <span class="comment">// 输出 qwqcoder</span></span><br><span class="line"><span class="comment">// 改变调用者</span></span><br><span class="line">getName.<span class="title function_">call</span>(school); <span class="comment">// 输出 jxust</span></span><br><span class="line">getName.<span class="title function_">call</span>(school); <span class="comment">// 输出 qwqcoder</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------</span></span><br><span class="line"><span class="comment">// 箭头函数, 不能作为构造函数实例化对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;qwqcoder&#x27;</span>, <span class="number">21</span>); <span class="comment">// 报大错😋</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------------------------------------------</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn3</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn3</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 报大错.😋</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------</span></span><br><span class="line"><span class="comment">// 简化声明语法</span></span><br><span class="line"><span class="comment">// 1. 只有一个形参</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">pow</span> = n =&gt; &#123;  <span class="comment">// 本来是 let add = (n) =&gt; &#123;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> n * n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 函数体就就一条语句, 此时可省略花括号, 若省略, 则return也必须省略</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = n =&gt; n + n;</span><br></pre></td></tr></table></figure>

<h2 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">data</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">data</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// rest </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, ...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------</span></span><br><span class="line"><span class="comment">// 应用1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = [<span class="string">&#x27;qwqcoder&#x27;</span>, <span class="string">&#x27;orzcoder&#x27;</span>, <span class="string">&#x27;buskcoder&#x27;</span>]</span><br><span class="line"><span class="title function_">fn1</span>(...a); <span class="comment">// 实参被 rest 变量从一个数组转化成多个变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用2</span></span><br><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> new_array = [...array1, ...array2];</span><br><span class="line"><span class="keyword">const</span> num_1234 = array1.<span class="title function_">concat</span>(array2);</span><br><span class="line"><span class="comment">// 克隆数组</span></span><br><span class="line"><span class="keyword">const</span> colon_array = [...array1]; <span class="comment">// 若存在引用类型, 仍是浅拷贝</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Symbol-变量"><a href="#Symbol-变量" class="headerlink" title="Symbol 变量"></a>Symbol 变量</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;qwqcoder&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1>]]></content>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>git操作</title>
    <url>/2024/03/15/46390b34.html</url>
    <content><![CDATA[<ul>
<li><p><code>git branch -f master HEAD~3</code></p>
<p>强制使得 <code>master</code> 分支指向 <code>HEAD</code> 向上追溯 $3$ 次的位置</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>spark</title>
    <url>/2024/06/04/9d13cf2d.html</url>
    <content><![CDATA[<h1 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h1><blockquote>
<p>RDD，全称Resilient Distributed Dataset，是Apache Spark中的核心抽象之一。它代表一个不可变的、分布式的数据集合，可以并行处理。以下是对RDD的详细解释：</p>
</blockquote>
<h3 id="RDD的特点"><a href="#RDD的特点" class="headerlink" title="RDD的特点"></a>RDD的特点</h3><ol>
<li><p><strong>弹性（Resilient）</strong>：</p>
<ul>
<li>RDD能够自动从节点故障中恢复数据。这是通过追踪生成RDD的系列转换（称为lineage）实现的。如果部分数据丢失，Spark可以利用这些转换重新计算丢失的数据。</li>
</ul>
</li>
<li><p><strong>分布式（Distributed）</strong>：</p>
<ul>
<li>RDD的数据分布在集群的多个节点上，这使得大规模数据处理成为可能。Spark自动管理数据的分布和并行计算。</li>
</ul>
</li>
<li><p><strong>数据集（Dataset）</strong>：</p>
<ul>
<li>RDD是一个包含多个数据项的集合。这个集合可以是简单的数据类型（如整数、字符串），也可以是复杂的对象。</li>
</ul>
</li>
</ol>
<h3 id="创建RDD"><a href="#创建RDD" class="headerlink" title="创建RDD"></a>创建RDD</h3><p>RDD可以通过多种方式创建：</p>
<ol>
<li><p><strong>从集合中创建</strong>：</p>
<ul>
<li>可以将一个本地集合并行化以创建RDD。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>从外部存储系统中创建</strong>：</p>
<ul>
<li>可以从文件系统（本地文件系统、HDFS等）中读取数据创建RDD。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdd = sc.textFile(<span class="string">&quot;path/to/file.txt&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>通过转换现有的RDD</strong>：</p>
<ul>
<li>可以通过对现有的RDD进行转换（如<code>map</code>, <code>filter</code>, <code>flatMap</code>等）来创建新的RDD。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdd2 = rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="RDD的操作"><a href="#RDD的操作" class="headerlink" title="RDD的操作"></a>RDD的操作</h3><blockquote>
<p>RDD支持类似于MapReduce的操作过程。Spark提供了一组丰富的高阶函数，用于对RDD进行转换（Transformations）和行动（Actions），其中有些操作与MapReduce中的<code>mapper</code>和<code>reducer</code>非常相似。</p>
</blockquote>
<h3 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h3><h4 id="转换（Transformations）"><a href="#转换（Transformations）" class="headerlink" title="转换（Transformations）"></a>转换（Transformations）</h4><p>转换操作会从一个RDD生成另一个RDD，它们是惰性求值的，只有在需要结果时才会计算。</p>
<ol>
<li><p>**<code>map</code>**：</p>
<ul>
<li>类似于MapReduce中的mapper，用于对RDD中的每个元素进行操作并生成一个新的RDD。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">rdd2 = rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * <span class="number">2</span>)  <span class="comment"># [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>flatMap</code>**：</p>
<ul>
<li>与<code>map</code>类似，但每个输入元素可以映射到0或多个输出元素（即返回一个迭代器而不是单个值）。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdd = sc.parallelize([<span class="string">&quot;Hello world&quot;</span>, <span class="string">&quot;Hi&quot;</span>])</span><br><span class="line">rdd2 = rdd.flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot; &quot;</span>))  <span class="comment"># [&quot;Hello&quot;, &quot;world&quot;, &quot;Hi&quot;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>filter</code>**：</p>
<ul>
<li>用于筛选RDD中的元素，保留满足条件的元素。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">rdd2 = rdd.<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>)  <span class="comment"># [2, 4]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>groupByKey</code>**：</p>
<ul>
<li>将具有相同键的值分组在一起。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdd = sc.parallelize([(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">3</span>)])</span><br><span class="line">rdd2 = rdd.groupByKey()  <span class="comment"># [(&quot;a&quot;, [1, 3]), (&quot;b&quot;, [2])]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>reduceByKey</code>**：</p>
<ul>
<li>类似于MapReduce中的reducer，对具有相同键的值进行聚合。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdd = sc.parallelize([(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">3</span>)])</span><br><span class="line">rdd2 = rdd.reduceByKey(<span class="keyword">lambda</span> x, y: x + y)  <span class="comment"># [(&quot;a&quot;, 4), (&quot;b&quot;, 2)]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="行动（Actions）"><a href="#行动（Actions）" class="headerlink" title="行动（Actions）"></a>行动（Actions）</h4><p>行动操作会触发实际计算，并返回结果到驱动程序。</p>
<ol>
<li><p>**<code>collect</code>**：</p>
<ul>
<li>收集RDD的所有元素并返回给驱动程序。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = rdd.collect()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>count</code>**：</p>
<ul>
<li>返回RDD中元素的数量。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = rdd.count()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>reduce</code>**：</p>
<ul>
<li>通过给定的函数聚合RDD中的所有元素。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = rdd.reduce(<span class="keyword">lambda</span> x, y: x + y)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>**<code>take</code>**：</p>
<ul>
<li>返回RDD中前n个元素。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">top3 = rdd.take(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="示例：使用-map-和-reduceByKey"><a href="#示例：使用-map-和-reduceByKey" class="headerlink" title="示例：使用 map 和 reduceByKey"></a>示例：使用 <code>map</code> 和 <code>reduceByKey</code></h3><p>以下是一个简单的例子，展示了如何使用 <code>map</code> 和 <code>reduceByKey</code> 来实现类似MapReduce的过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SparkConf和SparkContext</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;MapReduceExample&quot;</span>)</span><br><span class="line">sc = SparkContext(conf = conf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个包含单词的RDD</span></span><br><span class="line">lines = sc.textFile(<span class="string">&quot;path/to/file.txt&quot;</span>)</span><br><span class="line">words = lines.flatMap(<span class="keyword">lambda</span> line: line.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 映射每个单词为 (word, 1)</span></span><br><span class="line">word_tuples = words.<span class="built_in">map</span>(<span class="keyword">lambda</span> word: (word, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 聚合具有相同键（单词）的值</span></span><br><span class="line">word_counts = word_tuples.reduceByKey(<span class="keyword">lambda</span> x, y: x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 收集并打印结果</span></span><br><span class="line">results = word_counts.collect()</span><br><span class="line"><span class="keyword">for</span> word, count <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;word&#125;</span>: <span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭SparkContext</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure>

<p>这个例子展示了如何读取一个文件，将其分割成单词，然后统计每个单词的出现次数，这与MapReduce中的词频统计（Word Count）示例类似。</p>
<h3 id="RDD的优势"><a href="#RDD的优势" class="headerlink" title="RDD的优势"></a>RDD的优势</h3><ol>
<li><strong>容错性</strong>：</li>
</ol>
<ul>
<li>RDD通过lineage信息实现容错能力，能够在节点故障时自动重算丢失的数据分区。</li>
</ul>
<ol start="2">
<li><strong>并行计算</strong>：</li>
</ol>
<ul>
<li>RDD将数据分布到集群的各个节点上，并行执行计算，提高了处理效率。</li>
</ul>
<ol start="3">
<li><strong>持久化</strong>：<ul>
<li>可以将RDD持久化到内存或磁盘，以提高后续操作的性能。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdd.persist()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>RDD是Spark中进行大规模数据处理的基础抽象，提供了简单而强大的API来操作分布式数据集。通过RDD，用户可以以一种容错和高效的方式处理大数据集。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local&quot;</span>).setAppName(<span class="string">&quot;StudentScores&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>下面是对这句代码的详细解释：</p>
<ul>
<li><p><code>SparkConf()</code>: 创建一个SparkConf对象，用于设置Spark应用程序的配置参数。</p>
</li>
<li><p><code>.setMaster(&quot;local&quot;)</code>: 指定Spark应用程序的主节点（Master URL）。在这个例子中，<code>&quot;local&quot;</code>表示在本地运行，不需要连接到集群。这意味着Spark将在本地计算机上运行，并使用一个线程来执行任务。如果你想要使用多个线程，可以指定为<code>&quot;local[N]&quot;</code>，其中<code>N</code>是线程数，例如<code>&quot;local[4]&quot;</code>表示使用4个线程。</p>
</li>
<li><p><code>.setAppName(&quot;StudentScores&quot;)</code>: 设置Spark应用程序的名称。在这个例子中，应用程序被命名为<code>&quot;StudentScores&quot;</code>。这个名称在你查看Spark应用程序的监控界面时会显示出来，有助于你识别和管理不同的Spark应用程序。</p>
</li>
</ul>
<p>总结一下，这句代码创建了一个配置对象<code>conf</code>，该对象指定了Spark应用程序将在本地运行，并命名该应用程序为“StudentScores”。这个配置对象稍后会用于创建Spark上下文（<code>SparkContext</code>），从而启动和运行Spark应用程序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">subject_rdd = sc.textFile(<span class="string">f&quot;../test1/<span class="subst">&#123;subject&#125;</span>.txt&quot;</span>).<span class="built_in">map</span>(parse_line)</span><br></pre></td></tr></table></figure>

<p>下面是对这句代码的详细解释：</p>
<ul>
<li><p><code>sc.textFile(f&quot;../test1/&#123;subject&#125;.txt&quot;)</code>: 使用 <strong>SparkContext</strong>（<code>sc</code>）的<code>textFile</code>方法读取文件。<code>f&quot;../test1/&#123;subject&#125;.txt&quot;</code>是一个Python的f-string，它会将<code>subject</code>变量的值插入到文件路径中。例如，如果<code>subject</code>的值是<code>&quot;math&quot;</code>，那么<code>f&quot;../test1/math.txt&quot;</code>将会生成字符串<code>&quot;../test1/math.txt&quot;</code>。<code>textFile</code>方法会读取这个文件并返回一个RDD，其中每一行都是RDD中的一个元素。</p>
</li>
<li><p><code>.map(parse_line)</code>: 对RDD中的每一个元素应用<code>parse_line</code>函数。<code>map</code>是一个转换操作，它会将<code>parse_line</code>函数应用到RDD的每一个元素上，并返回一个新的RDD。<code>parse_line</code>函数的作用是解析每一行数据，将其转换为一个包含学生姓名和成绩的元组。例如，如果文件中的一行是<code>&quot;Alice,85&quot;</code>, 那么<code>parse_line</code>函数会将其转换为<code>(&quot;Alice&quot;, 85.0)</code>。</p>
</li>
</ul>
<p>总结一下，这句代码读取指定路径的文本文件，将每一行数据解析成一个包含学生姓名和成绩的元组，然后返回一个包含这些元组的RDD。这个RDD可以在后续的Spark操作中使用。</p>
]]></content>
      <categories>
        <category>spark</category>
      </categories>
      <tags>
        <tag>分布式计算</tag>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 语法学习</title>
    <url>/2024/03/21/80bdef1f.html</url>
    <content><![CDATA[<h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><ul>
<li><p><code>Scanner</code>, <code>System.out.printf()</code></p>
</li>
<li><p><code>BufferedReader</code>, <code>BufferedWriter</code></p>
<p>**注意: **<code>BufferedWriter</code> 需要手动刷新缓冲区</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/*Scanner输入*/</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();  <span class="comment">// 读入下一个字符串</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();  <span class="comment">// 读入下一个整数</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">y</span> <span class="operator">=</span> sc.nextFloat();  <span class="comment">// 读入下一个单精度浮点数</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">z</span> <span class="operator">=</span> sc.nextDouble();  <span class="comment">// 读入下一个双精度浮点数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();  <span class="comment">// 读入下一行</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*BufferedReader输入*/</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*printf()输出*/</span></span><br><span class="line">        System.out.println(<span class="number">123</span>);  <span class="comment">// 输出整数 + 换行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);  <span class="comment">// 输出字符串 + 换行</span></span><br><span class="line">        System.out.print(<span class="number">123</span>);  <span class="comment">// 输出整数</span></span><br><span class="line">        System.out.print(<span class="string">&quot;yxc\n&quot;</span>);  <span class="comment">// 输出字符串</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%04d %.2f\n&quot;</span>, <span class="number">4</span>, <span class="number">123.456D</span>);  <span class="comment">// 格式化输出，float与double都用%f输出</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*BufferedWriter输出*/</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">        bw.write(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">        bw.flush();  <span class="comment">// 需要手动刷新缓冲区</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><ul>
<li>定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span>[] b; <span class="comment">// 未初始化，需要在后续代码中为其分配内存空间</span></span><br><span class="line"><span class="comment">// 上面两行代码可以简写为如下代码</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>], b;</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;        <span class="comment">// 含有3个元素的数组，元素分别是0, 1, 2</span></span><br><span class="line"><span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];       <span class="comment">// 含有3个元素的数组，元素的值均为0</span></span><br><span class="line"><span class="type">char</span>[] d = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;; <span class="comment">// 字符数组的初始化, 字符数组默认初始化为 \u0000 (不可见字符)</span></span><br></pre></td></tr></table></figure>

<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><ul>
<li>定义</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>]; <span class="comment">// 大小为3的数组，每个元素是含有4个整数的数组。</span></span><br><span class="line"><span class="type">int</span>[][][] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">20</span>][<span class="number">30</span>]; <span class="comment">// 将所有元素的初值为0</span></span><br><span class="line"><span class="comment">// 大小为10的数组，它的每个元素是含有20个数组的数组</span></span><br><span class="line"><span class="comment">// 这些数组的元素是含有30个整数的数组</span></span><br></pre></td></tr></table></figure>

<ul>
<li>初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = &#123;           <span class="comment">// 三个元素，每个元素都是大小为4的数组</span></span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,       <span class="comment">// 第1行的初始值</span></span><br><span class="line">            &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;,       <span class="comment">// 第2行的初始值</span></span><br><span class="line">            &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;      <span class="comment">// 第3行的初始值</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ )  <span class="comment">// 将第一行全部变成0</span></span><br><span class="line">    a[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++ ) &#123;  <span class="comment">// 输出二维数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j ++ ) &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="常用-API"><a href="#常用-API" class="headerlink" title="常用 API"></a>常用 <strong>API</strong></h2><ul>
<li>属性: <code>length</code>, 返回数组长度</li>
<li><code>Arrays.sort()</code>, 数组排序</li>
<li><code>Arrays.fill(int[] a, int val)</code>, 填充数组</li>
<li><code>Arrays.toString</code>, 将数组转为字符串</li>
<li><code>Arrays.deepToString</code>, 将多维数组转为字符串</li>
<li>数组不可扩容</li>
<li>使用 <code>Arrays</code> 需要 <code>import java.util.Arrays</code></li>
</ul>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ul>
<li><p>每个常用字符都对应一个 <code>-128 ~ 127</code> 的数字，二者之间可以相互转化。注意：目前负数没有与之对应的字符。</p>
</li>
<li><p>常用ASCII值：<code>&#39;A&#39;- &#39;Z&#39;</code> 是65 ~ 90，<code>&#39;a&#39; - &#39;z&#39;</code> 是 <code>97 - 122</code>，<code>0 - 9</code> 是 </p>
<p><code>48 - 57</code>。<br>字符可以参与运算，运算时会将其当做整数</p>
</li>
</ul>
<h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><ul>
<li>初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;My name is &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> b;  <span class="comment">// 存储到了相同地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> b + <span class="string">&quot;yxc&quot;</span>;  <span class="comment">// String可以通过加号拼接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;My age is &quot;</span> + <span class="number">18</span>;  <span class="comment">// int会被隐式转化成字符串&quot;18&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.format(<span class="string">&quot;My age is %d&quot;</span>, <span class="number">18</span>);  <span class="comment">// 格式化字符串，类似于C++中的sprintf</span></span><br><span class="line"><span class="type">String</span> <span class="variable">money_str</span> <span class="operator">=</span> <span class="string">&quot;123.45&quot;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> Double.parseDouble(money_str);  <span class="comment">// String转double</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Java中，String 类是不可变的，这意味着一旦创建了一个字符串对象，它的内容就不能被修改。执行 <code>a += &quot;World&quot;;</code> 这样的字符串拼接操作时，实际上会创建一个新的字符串对象，其中包含了原始字符串 “Hello “ 和新字符串 “World” 的连接结果。</p>
</blockquote>
<ul>
<li>访问</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i ++ ) &#123;</span><br><span class="line">    System.out.print(str.charAt(i));  <span class="comment">// 只能读取，不能写入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>常用 API</li>
</ul>
<ol>
<li><p><code>length()</code>：返回长度</p>
</li>
<li><p><code>split(String regex)</code>：分割字符串</p>
</li>
<li><p><code>indexOf(char c)</code>、<code>indexOf(String str)</code>、<code>lastIndexOf(char c)</code>、<code>lastIndexOf(String str)</code>：查找，找不到返回 <code>-1</code></p>
</li>
<li><p><code>equals()</code>：判断两个字符串是否相等，注意不能直接用 <code>==</code></p>
</li>
<li><p><code>compareTo()</code>：判断两个字符串的字典序大小，负数表示小于，<code>0</code> 表示相等，正数表示大于</p>
</li>
<li><p><code>startsWith()</code>：判断是否以某个前缀开头</p>
</li>
<li><p><code>endsWith()</code>：判断是否以某个后缀结尾</p>
</li>
<li><p><code>trim()</code>：去掉首尾的空白字符</p>
</li>
<li><p><code>toLowerCase()</code>：全部用小写字符</p>
</li>
<li><p><code>toUpperCase()</code>：全部用大写字符</p>
</li>
<li><p><code>replace(char oldChar, char newChar)</code>：替换字符</p>
</li>
<li><p><code>replace(String oldRegex, String newRegex)</code>：替换字符串</p>
</li>
<li><p><code>substring(int beginIndex, int endIndex)</code>：</p>
<p>返回 <code>[beginIndex, endIndex)</code> 中的子串</p>
</li>
<li><p><code>toCharArray()</code>：将字符串转化成字符数组</p>
</li>
</ol>
<ul>
<li>输入输出</li>
</ul>
<ol>
<li><code>Scanner.next()</code></li>
<li><code>Scanner.nextLine()</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sc.next();  <span class="comment">// 输入字符串，遇到空格、回车等空白字符时停止输入</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> sc.nextLine();  <span class="comment">// 输入一整行字符串，遇到空格不会停止输入，遇到回车才会停止</span></span><br><span class="line"></span><br><span class="line">        System.out.println(str1);  <span class="comment">// 可以直接输出</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%s\n&quot;</span>, str2);  <span class="comment">// 也可以格式化输出，用 %s 表示字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><code>StringBuilder</code>, <code>StringBuffer</code></li>
</ul>
<ol>
<li><p><code>String</code> 无法修改, 如果想要修改字符串, 可以使用 <code>StringBuilder</code>, <code>StringBuffer</code></p>
</li>
<li><p><code>StringBuffer</code> 线程安全，速度较慢；<code>StringBuilder</code> 线程不安全，速度较快。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello &quot;</span>);  <span class="comment">// 初始化</span></span><br><span class="line">sb.append(<span class="string">&quot;World&quot;</span>);  <span class="comment">// 拼接字符串</span></span><br><span class="line">System.out.println(sb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sb.length(); i ++ ) &#123;</span><br><span class="line">    sb.setCharAt(i, (<span class="type">char</span>)(sb.charAt(i) + <span class="number">1</span>));  <span class="comment">// 读取和写入字符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sb);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常使用  <code>reverse()</code> 翻转字符串</p>
</blockquote>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li>参数传递</li>
</ul>
<ol>
<li>值传递</li>
<li>引用传递</li>
</ol>
<ul>
<li><p>值传递</p>
<p>八大基本数据类型和 <code>String</code> 类型等采用值传递。</p>
<p><strong>将实参的初始值拷贝给形参</strong>。此时，对形参的改动不会影响实参的初始值。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        x = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        f(x);</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>引用传递</p>
<p>除 <code>String</code> 以外的数据类型的对象，例如数组、<code>StringBuilder</code> 等采用引用传递。</p>
<p>将实参的引用（<strong>地址</strong>）传给形参，通过引用找到变量的真正地址，然后对地址中的值修改。所以此时对形参的修改会影响实参的初始值。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f1</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>; i &lt; j; i ++, j -- ) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            a[j] = t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f2</span><span class="params">(StringBuilder sb)</span> &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        f1(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        f2(sb);</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p> 类的定义</p>
<ul>
<li><p><code>public</code>: 所有对象均可以访问</p>
</li>
<li><p><code>private</code>: 只有本类内部可以访问</p>
</li>
<li><p><code>protected</code>：同一个包或者子类中可以访问</p>
</li>
<li><p>不添加修饰符：在同一个包中可以访问</p>
</li>
<li><p>静态（带static修饰符）成员变量&#x2F;函数与普通成员变量&#x2F;函数的区别：</p>
<p>所有static成员变量&#x2F;函数在类中只有一份，被所有类的对象共享；<br>所有普通成员变量&#x2F;函数在类的每个对象中都有独立的一份；</p>
</li>
</ul>
<blockquote>
<p>静态函数中只能调用静态函数&#x2F;变量；普通函数中既可以调用普通函数&#x2F;变量，也可以调用静态函数&#x2F;变量。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;(%d, %d)&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>每个类只能继承一个父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ColorPoint</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(x, y);</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;(%d, %d, %s)&quot;</span>, <span class="built_in">super</span>.getX(), <span class="built_in">super</span>.getY(), <span class="built_in">this</span>.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="type">Point</span> <span class="variable">colorPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ColorPoint</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多态，同一个类的实例，调用相同的函数，运行结果不同</span></span><br><span class="line">        System.out.println(point.toString());</span><br><span class="line">        System.out.println(colorPoint.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h2><p><code>interface</code> 与 <code>class</code> 类似。主要用来定义类中所需包含的函数。</p>
<p><strong>接口也可以继承其他接口，一个类可以实现多个接口。</strong></p>
<ul>
<li>定义</li>
</ul>
<p>接口不添加修饰符时, 默认为 <code>public</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>继承</li>
</ul>
<p>接口可以继承多个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Hero</span> <span class="keyword">extends</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现</li>
</ul>
<p>每个类可以实现多个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Zeus</span> <span class="keyword">implements</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Zeus&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Attack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Hi!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Move!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>多态</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Athena</span> <span class="keyword">implements</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Athena&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Attack!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Hi!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Move!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hero[] heros = &#123;<span class="keyword">new</span> <span class="title class_">Zeus</span>(), <span class="keyword">new</span> <span class="title class_">Athena</span>()&#125;;</span><br><span class="line">        <span class="keyword">for</span> (Hero hero: heros) &#123;</span><br><span class="line">            hero.greet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh访问</title>
    <url>/2024/03/16/6cede086.html</url>
    <content><![CDATA[<h1 id="ssh连接过程"><a href="#ssh连接过程" class="headerlink" title="ssh连接过程"></a>ssh连接过程</h1><h2 id="密钥类型"><a href="#密钥类型" class="headerlink" title="密钥类型"></a>密钥类型</h2><p><img src="/../img/ssh%E8%AE%BF%E9%97%AE.assets/image-20240316001710619.png" alt="image-20240316001710619"></p>
<p><img src="/../img/ssh%E8%AE%BF%E9%97%AE.assets/image-20240316001727647.png" alt="image-20240316001727647"></p>
<h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p><code>SSH(Secure Shell)</code>是一种用于在网络上安全地进行远程登录和执行命令的协议。下面是 SSH 连接的简要流程：</p>
<ol>
<li><p><strong>客户端发起连接请求：</strong> 用户在本地计算机上的 <code>SSH</code> 客户端（比如 <code>OpenSSH</code> 或 <code>PuTTY</code>）输入远程服务器的地址和用户名，并发起连接请求。</p>
</li>
<li><p><strong>服务器端响应：</strong> 服务器监听 SSH 连接请求，并在收到连接请求后响应客户端。</p>
</li>
<li><p><strong>密钥交换：</strong> 客户端和服务器之间进行密钥交换，确保数据传输的安全性。这个过程通常包括以下步骤：</p>
<ul>
<li>客户端向服务器发送一个连接请求，并发送自己支持的加密算法列表。</li>
<li>服务器从接收到的加密算法列表中选择一个加密算法，并发送自己的公钥给客户端。</li>
<li>客户端使用服务器的公钥对一个随机生成的**会话密钥(对称密钥)**进行加密，并将加密后的会话密钥发送给服务器。</li>
<li>服务器使用自己的私钥解密客户端发送的会话密钥。</li>
</ul>
</li>
<li><p><strong>认证：</strong> 客户端将用户凭据（如密码或 SSH 密钥）发送给服务器进行身份认证。如果凭据验证成功，客户端将被授权访问服务器。</p>
</li>
<li><p><strong>会话建立：</strong> 认证成功后，客户端和服务器建立起安全的通信会话，可以在该会话中安全地传输数据。</p>
</li>
<li><p><strong>数据传输：</strong> 客户端和服务器之间可以安全地传输数据，包括登录命令、文件传输、远程执行命令等操作。</p>
</li>
<li><p><strong>连接关闭：</strong> 当用户退出登录或连接超时时，连接被关闭，SSH 会话结束。</p>
</li>
</ol>
<p>总的来说，SSH 连接的流程涉及到密钥交换、身份认证和安全通信会话建立等步骤，确保了数据传输的安全性和可靠性。</p>
<h1 id="区分authorized-keys与known-hosts文件"><a href="#区分authorized-keys与known-hosts文件" class="headerlink" title="区分authorized_keys与known_hosts文件"></a>区分authorized_keys与known_hosts文件</h1><p><code>authorized_keys</code> 和 <code>known_hosts</code> 都是与 SSH 密钥认证相关的文件，但它们在功能和用途上有所不同：</p>
<ol>
<li><p><strong>authorized_keys：</strong></p>
<ul>
<li>位置：<code>authorized_keys</code> 文件位于服务器上的用户家目录下的 <code>.ssh</code> 目录中（通常是 <code>~/.ssh/authorized_keys</code>）。</li>
<li>用途：<code>authorized_keys</code> 文件用于存储用户的公钥，以便服务器可以使用这些公钥来验证用户的身份。当用户尝试通过 SSH 连接到服务器时，服务器会检查该用户的 <code>authorized_keys</code> 文件，以确定是否允许连接。如果用户的公钥在 <code>authorized_keys</code> 文件中被发现，则服务器会允许用户连接，并使用相应的私钥进行身份验证。</li>
</ul>
</li>
<li><p><strong>known_hosts：</strong></p>
<ul>
<li>位置：<code>known_hosts</code> 文件位于用户家目录下的 <code>.ssh</code> 目录中（通常是 <code>~/.ssh/known_hosts</code>）。</li>
<li>用途：<code>known_hosts</code> 文件用于存储用户访问过的远程主机的公钥信息。当用户首次连接到一个远程主机时，SSH 客户端会将该主机的公钥保存到自己的 <code>known_hosts</code> 文件中。随后，当用户再次连接到同一台主机时，SSH 客户端会使用 <code>known_hosts</code> 文件中存储的公钥来验证主机的身份，以确保连接的安全性。</li>
</ul>
</li>
</ol>
<p>因此，<code>authorized_keys</code> 文件用于服务器端存储用户的公钥，用于用户的身份验证；而 <code>known_hosts</code> 文件用于客户端存储已知主机的公钥，用于验证远程主机的身份。这两个文件在 SSH 认证过程中扮演着不同的角色，但都是确保连接安全性的重要组成部分。</p>
]]></content>
      <tags>
        <tag>ssh</tag>
        <tag>rsa加密</tag>
      </tags>
  </entry>
  <entry>
    <title>高数公式</title>
    <url>/2024/03/17/29c7973.html</url>
    <content><![CDATA[<h1 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h1><p>$$<br>\begin{align}<br>    arctan’x&amp;&#x3D;\frac{1}{1+x^2}			\<br>    arccot’x&amp;&#x3D;-\frac{1}{1+x^2}			\<br>    \<br>    arcsin’x&amp;&#x3D;\frac{1}{\sqrt{1-x^2}}	\<br>    arccos’x&amp;&#x3D;-\frac{1}{\sqrt{1-x^2}}	\<br>    \<br>    tan’x&amp;&#x3D;sec^2x						\<br>    cot’x&amp;&#x3D;-csc^2x						\<br>    sec’x&amp;&#x3D;secxtanx						\<br>    csx’x&amp;&#x3D;-cscxcotx					\<br>    \<br>    sin^{(n)}x&amp;&#x3D;sinx(x+\frac{n\pi}{2})	\<br>    cos^{(n)}x&amp;&#x3D;cosx(x+\frac{n\pi}{2})	\<br>\end{align}<br>$$</p>
<h1 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h1><p>$$<br>\begin{align}<br>\int tanx\ dx&amp;&#x3D;-ln|cosx|+C			\<br>\int cotx\ dx&amp;&#x3D;ln|sinx|+C			\<br>\int cscx\ dx&amp;&#x3D;ln|cscx-cotx|+C		\<br>\int secx\ dx&amp;&#x3D;ln|secx+tanx|+C		\</p>
<p>\end{align}<br>$$</p>
<h1 id="泰勒"><a href="#泰勒" class="headerlink" title="泰勒"></a>泰勒</h1><p>$$<br>\begin{align}<br>e^x &amp;\sim 1 + x + \frac{x^2}{2!}+\frac{x^3}{3!}\<br>\ln(1 + x) &amp;\sim x - \frac{x^2}{2}+\frac{x^3}{3}\<br>(1+x)^{\alpha} &amp;\sim 1 + \alpha x + \frac{\alpha(\alpha - 1)}{2!}x^2+o(x^2) \<br>\sin x &amp;\sim x-\frac{x^3}{3!}+\frac{x^5}{5!}-\frac{x^7}{7!}\<br>\arcsin x &amp;\sim x + \frac{x^3}{3!} + o(x^3) \<br>\cos x &amp;\sim 1-\frac{x^2}{2!}+\frac{x^4}{4!}-\frac{x^6}{6!}+\frac{x^8}{8!}\<br>\tan x &amp;\sim x+\frac{x^3}{3}+\frac{2x^5}{15}+\frac{17 x^7}{315} \<br>\arctan x &amp;\sim x - \frac{x^3}{3!} + o(x^3) \<br>\frac{1}{1 + x}&amp;\sim 1-x+x^2-x^3…&#x3D;\sum_{n&#x3D;0}^{\infty}(-1)^nx^n,\ (-1\lt x\lt1) \<br>\frac{1}{1 - x}&amp;\sim1+x+x^2…+x^n&#x3D;\sum_{n&#x3D;0}^{\infty}x^n,\ (-1\lt x\lt1)<br>\end{align}<br>$$</p>
<h1 id="等价无穷小"><a href="#等价无穷小" class="headerlink" title="等价无穷小"></a>等价无穷小</h1><p><img src="https://s2.loli.net/2024/03/17/IiWKxwf29satbGA.png" alt="image-20231108143822054"></p>
<p>$$<br>\begin{align}<br>\ln(x+1) - x &amp;\sim -\frac{1}{2}x^2 \<br>\ln(x + \sqrt{x^2+1}) &amp;\sim x \<br>1 - (\cos{x})^a &amp;\sim \frac{1}{2}ax^2 \ (a \ne 0) \<br>(1+x)^{\frac{1}{x}}-e &amp;\sim -\frac{e}{2}x \ (x\rightarrow 0^+)\<br>x^2-\ln^2(1+x)&amp;\sim x^3 \<br>\end{align}<br>$$</p>
]]></content>
      <categories>
        <category>考研学习</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
</search>
